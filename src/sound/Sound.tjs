// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

Class(Sound)
{
    /**
     * Gets or sets whether the sound loops.
     * @type bool
     */
    property loop {
        setter(v) {
            typeBool(v)
            _buffer.looping  = _loop = !!v;
            _buffer.flags[0] = _loop ? 0 : 1;
            _triggerEvent(SoundEventType_SetLoop, _loop);
        }
        getter {
            return _loop;
        }
    }

    /**
     * Gets or sets the volume. The value must be within the range of [0, 100]
     * @type int
     */
    var _volume;
    property volume {
        setter(v) {
            typeNumber(v)
            assert(0 <= v && v <= 100)
            _buffer.stopFade();
            for (var i = 0; i < _volumeFactors.count; ++i) {
                v *= _volumeFactors[i] / 100;
            }
            _buffer.volume2 = v * 1000;
            _triggerEvent(SoundEventType_SetVolume, v);
        }
        getter {
            return _volume !== void ? _volume : (int)(_buffer.volume2 / 1000);
        }
    }

    /**
     * Gets or sets the panning. The value must be within the range of [-100, 100]
     * @type int
     */
    property pan {
        setter(v) {
            typeNumber(v)
            assert(-100 <= v && v <= 100)
            _buffer.pan = v * 1000;
            _triggerEvent(SoundEventType_SetPan, v);
        }
        getter {
            return (int)(_buffer.pan / 1000);
        }
    }

    property speed {
        setter(v) { notImplemented(); }
        getter { notImplemented(); }
    }

    Constructor() {
        _buffer = new global.WaveSoundBuffer(this);
        global.includeObservable(this);
    }

    Finalize() {
        _buffer.stopFade();
        _buffer.stop();
        invalidate _buffer;
        invalidate _volumeFactors;
        invalidate _fadeCompletedCallbacks;
        global.finalizeObservable(this);
    }

    /**
     * Play the specified sound.
     * @param string The sound file to play.
     * @param int The time to fade in.
     * @param startLabel string The label which shows start position.
     */
    Func(play)(file:string, time:int = 0, startLabel:string+) {
        checkArgs
        assert(time >= 0)
        file = Storages.getExistSoundFileName(file);
        if (file === void) {
            return new global.FileNotFoundError(file, expandMessage(ERROR_SOUND_FILE_NOT_FOUND, "FILE", file));
        }
        _buffer.stopFade();
        _buffer.stop();
        _buffer.open(file);
        loop = _loop;
        if (startLabel !== void) {
            if (_buffer.labels[startLabel] === void) {
                return new global.Error(expandMessage(ERROR_SOUND_LABEL_NOT_FOUND, "LABEL", startLabel));
            }
            _buffer.samplePosition = _buffer.labels[startLabel].samplePosition;
        }
        if (time > 0) {
            _buffer.volume = 0;
            _buffer.play();
            _buffer.fade(100000, time, 0);
        } else {
            _buffer.volume = 100000;
            _buffer.play();
        }
        _currentFile = file;
        return SUCCESS;
    }

    /**
     * Stop the playing sound.
     * @param int time The time to fade out.
     */
    Func(stop)(time:int = 0) {
        checkArgs
        assert(time >= 0)
        _buffer.stopFade();
        if (time > 0 && _currentStatus === "play") {
            _fadeCompletedCallbacks.push(_buffer.stop);
            _buffer.fade(0, time, 0);
        } else {
            _buffer.stop();
        }
        _currentFile = "";
    }

    /**
     * Fade the volume to the specified value.
     * @param int volume The volume to be reached.
     * @param int time The time to fade.
     */
    Func(fade)(volume:int, time:int = 0) {
        checkArgs
        assert(0 <= volume && volume <= 100)
        assert(time >= 0)
        _buffer.stopFade();
        if (time > 0 && _currentStatus === "play") {
            _fadeCompletedCallbacks.push(LMD{
                owner.volume = volume;
                owner._buffer.volume = 100000;
                owner._volume = void;
            } incontextof %[owner:this, volume:volume]);
            {
                var t = _buffer.volume;
                _volume = this.volume;
                _buffer.volume = this.volume * 1000;
                this.volume = t / 1000;
            }
            _buffer.fade(volume * 1000, time, 0);
        } else {
            this.volume = volume;
        }
    }

    Func(pause)(time:int = 0) { notImplemented(); }
    Func(resume)(time:int = 0) { notImplemented(); }
    Func(exchange)(intime:int = 0, outtime:int = 0, overlap:int = 0) { notImplemented(); }

    /**
     * Set the properties which this buffer's volume depends on.
     * @param array props The array of the properties.
     */
    Func(setVolumeFactors)(props:Array) {
        checkArgs
        _volumeFactors.assign(props);
        volume = volume;
    }

    /**
     * This function is called when a buffer event occurs.
     */
    Func(action)(event:Dictionary) {
        checkArgs
        if (event.target !== _buffer) return;
        switch (event.type) {
        case "onStatusChanged":
            if (event.status === "play") _triggerEvent(SoundEventType_Play);
            else if (event.status === "stop") _triggerEvent(SoundEventType_Stop);
            _currentStatus = event.status;
            break;
        case "onLabel":
            _triggerEvent(SoundEventType_Label, event.name);
            break;
        case "onFadeCompleted":
            for (var i = 0; i < _fadeCompletedCallbacks.count; ++i) {
                _fadeCompletedCallbacks[i]();
            }
            _fadeCompletedCallbacks.clear();
            break;
        }
    }



    var _buffer;
    var _currentFile = "";
    var _currentStatus = "unload";
    var _volumeFactors = [];
    var _loop = false;
    var _fadeCompletedCallbacks = [];
}
