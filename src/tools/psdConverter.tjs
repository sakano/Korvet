// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

Class(PSDConverter)
{
    var loader = new PSDLoader();

    Constructor() {}

    Func(initLayer)(layer:Layer) {
        checkArgs
        layer.assignImages(loader.win.primaryLayer);
    }

    Func(createTemporaryLayer)() {
        return new global.Layer(loader.win, loader.win.primaryLayer);
    }

    /// @param layersInfo Array レイヤ情報
    /// @param delim char 区切り文字の種類
    /// @param delimValue 区切り値
    /// @return Array 指定された区切り値をもつlayerInfo
    Func(searchDelim)(layersInfo:any+, delim:string, delimValue:any+) {
        checkArgs
        var info = [];
        for (var i = 0; i < layersInfo.count; ++i) {
            if (layersInfo[i].delims[delim].find(delimValue) >= 0) info.add(layersInfo[i]);
        }
        return info;
    }

    Func(convert)(filename:string) {
        checkArgs
        var layersInfo = loader.getLayersInfo(filename);
        var baseInfo = getBaseInfo(layersInfo);
        var orgBaseInfo = %[];
        (Dictionary.assignStruct incontextof orgBaseInfo)(baseInfo);
        var destFolder = Storages.extractStoragePath(filename);
        for (var i = 0; i < baseInfo.output.count; ++i) {
            clearImagesCache();
            with (baseInfo) {
                .baseName  = orgBaseInfo.baseName.replace(/SIZE/, .output[i].size);
                .groupName = orgBaseInfo.groupName.replace(/SIZE/, .output[i].size);
                .trimRect.left   = (int)(orgBaseInfo.trimRect.left   * .output[i].ratio);
                .trimRect.top    = (int)(orgBaseInfo.trimRect.top    * .output[i].ratio);
                .trimRect.width  = (int)(orgBaseInfo.trimRect.width  * .output[i].ratio);
                .trimRect.height = (int)(orgBaseInfo.trimRect.height * .output[i].ratio);
            }
            outputImage(layersInfo, baseInfo, destFolder, baseInfo.output[i].ratio);

            var data = getLayerInfo(layersInfo, baseInfo);
            (Dictionary.saveStruct incontextof data)(destFolder + baseInfo.baseName + ".tjs", "");

            if (baseInfo.groupName === "FG") {
                var charDefineFile = destFolder + baseInfo.baseName + ".dtjs";
                var d = getTachieInfo(layersInfo, baseInfo);
                (Dictionary.saveStruct incontextof d)(charDefineFile);
            } else {
                var debugFile = destFolder + "events.otjs";
                var d = getEventInfo(layersInfo, baseInfo, Scripts.evalStorage(debugFile));
                (Dictionary.saveStruct incontextof d)(debugFile);
            }
        }
    }

    Func(outputImage)(layersInfo:Array, baseInfo:Dictionary, destFolder:string, ratio:string) {
        checkArgs
        var layer = createTemporaryLayer();
        var destFilenameMap = %[];
        for (var i = 0; i < layersInfo.count; ++i) {
            var layerInfo = layersInfo[i];
            if (!isOutputLayer(layerInfo) || layerInfo.delims[";"].find("noimage") >= 0) continue;

            layerInfo.filename = getOutputImageName(layerInfo, baseInfo, destFilenameMap);
            loadImagesWithCache(layer, layerInfo, layersInfo, ratio, false); // 画像を読み込む
            getDiff(layer, layerInfo, layersInfo, ratio); // 差分指定があれば差分抽出
            cropLayer(layer, baseInfo.trimRect, layerInfo); // クロッピング
            layer.saveLayerImage(destFolder + layerInfo.filename + ".png", "png"); // 画像出力
        }
    }

    Func(getBaseInfo)(layersInfo:Array) {
        checkArgs
        var baseInfo = %[
            baseName : "",
            groupName : "",
            trimRect : void,
            output : [],
        ];
        for (var i = 0; i < layersInfo.count; ++i) {
            var delims = layersInfo[i].delims["!"];
            for (var j = 0; j < delims.count; ++j) {
                switch (delims[j]) {
                case "NAME":  baseInfo.baseName  = delims[++j]; break;
                case "GROUP": baseInfo.groupName = delims[++j]; break;
                case "OUT": baseInfo.output.add(%[ size:delims[++j], ratio:delims[++j] ]); break;
                case "TRIM": 
                    baseInfo.trimRect = %[
                        left  : layersInfo[i].left,
                        top   : layersInfo[i].top,
                        width : layersInfo[i].width,
                        height: layersInfo[i].height,
                    ];
                    break;
                case "CHAR":
                    baseInfo.charName = delims[++j];
                    break;
                default:
                    throw new Exception("unknown base info");
                }
            }
        }
        return baseInfo;
    }

    Func(isOutputLayer)(layerInfo:Dictionary) {
        checkArgs
        return layerInfo.delims["@"].count > 0;
    }

    var loadImagesCache = %[];
    Func(loadImagesWithCache)(layer:Layer, layerInfo:Dictionary, layersInfo:Array, ratio:string, save:bool = true) {
        checkArgs
        var key = ratio + "_" + layerInfo.layerNumber;

        if (loadImagesCache[key] !== void) {
            layer.assignImages(loadImagesCache[key]);
            layer.setSize(loadImagesCache[key].width, loadImagesCache[key].height);
        } else {
            loadImages(*);
            if (save) with (loadImagesCache[key] = createTemporaryLayer()) {
                .assignImages(layer);
                .setSize(layer.width, layer.height);
            }
        }
    }

    Func(clearImagesCache)() {
        var keys = [];
        keys.assign(loadImagesCache);
        for (var i = 0; i < keys.count; i+=2) {
            if (keys[i][0] != "1") {
                invalidate keys[i+1];
                loadImagesCache[keys[i]] = void;
            }
        }
    }

    Func(loadImages)(layer:Layer, layerInfo:Dictionary, layersInfo:Array, ratio:string) {
        checkArgs
        var tmpLayer = createTemporaryLayer();

        if (layerInfo.delims["&"].count > 0) {
            var baseLayerInfo = searchDelim(layersInfo, "?", layerInfo.delims["&"][0])[0];
            if (baseLayerInfo === void) throw new Exception(@"合成元レイヤが見つかりません。(${layerInfo.name})");
            loadImagesWithCache(tmpLayer, baseLayerInfo, layersInfo, "1");
            layer.assignImages(tmpLayer);
            layer.independMainImage(true);
            layer.independProvinceImage(true);
            layer.setSize(tmpLayer.width, tmpLayer.height);

            initLayer(tmpLayer);
            var mask = layerInfo.delims[";"].find("mask") >= 0;
            if (mask) loader.getLayerData(tmpLayer, layerInfo.layerNumber);
            else      loader.getLayerDataRaw(tmpLayer, layerInfo.layerNumber);
            layer.operateRect(layerInfo.left, layerInfo.top, tmpLayer, 0, 0, tmpLayer.width, tmpLayer.height, omAlpha, layerInfo.opacity);
        } else {
            var mask = layerInfo.delims[";"].find("mask") >= 0;
            if (mask) loader.getLayerData(tmpLayer, layerInfo.layerNumber);
            else      loader.getLayerDataRaw(tmpLayer, layerInfo.layerNumber);
            layer.setSize(loader.width, loader.height);
            layer.fillRect(0, 0, loader.width, loader.height, 0);
            layer.operateRect(layerInfo.left, layerInfo.top, tmpLayer, 0, 0, tmpLayer.width, tmpLayer.height, omAlpha, layerInfo.opacity);
        }
        if (ratio != 1) {
            initLayer(tmpLayer);
            tmpLayer.setSize(layer.width * ratio, layer.height * ratio);
            tmpLayer.stretchCopy(0, 0, tmpLayer.width, tmpLayer.height, layer, 0, 0, layer.width, layer.height, stLanczos3);
            initLayer(layer);
            layer.assignImages(tmpLayer);
            layer.setSize(tmpLayer.width, tmpLayer.height);
        }
    }

    Func(getOutputImageName)(layerInfo:Dictionary, baseInfo:Dictionary, destFilenameMap:Dictionary) {
        checkArgs
        var name = @"${baseInfo.baseName}_${layerInfo.delims['@'][0]}";
        var baseName = name;
        for (var i = 1; destFilenameMap[name] !== void; ++i) {
            name = baseName + "_" + i;
        }
        destFilenameMap[name] = true;
        return name;
    }


    Func(cropLayer)(layer:Layer, trimRect:Dictionary, layerInfo:Dictionary) {
        checkArgs
        // トリミング
        var tmpLayer = createTemporaryLayer();
        tmpLayer.setSize(trimRect.width, trimRect.height);
        tmpLayer.copyRect(0, 0, layer, trimRect.left, trimRect.top, trimRect.width, trimRect.height);
        // 透明部分をクロップ
        var rect = tmpLayer.getCropRectZero();
        if (rect === void) throw new Exception(@"全体が透明です。layerName:${layerInfo.name}");
        layerInfo.offsetX = rect.x;
        layerInfo.offsetY = rect.y;
        layerInfo.offsetWidth = rect.w;
        layerInfo.offsetHeight = rect.h;
        initLayer(layer);
        layer.setSize(rect.w, rect.h);
        layer.copyRect(0, 0, tmpLayer, rect.x, rect.y, rect.w, rect.h);
    }

    Func(getDiff)(layer:Layer, layerInfo:Dictionary, layersInfo:Array, ratio:string) {
        checkArgs
        if (layerInfo.delims["#"].count === 0) return;
        var baseLayer = createTemporaryLayer();
        var baseLayerInfo = searchDelim(layersInfo, "?", layerInfo.delims["#"][0])[0];
        if (baseLayerInfo === void) throw new Exception(@"差分元レイヤが見つかりません。(layerName:${layerInfo.name}, base:${layerInfo.delims['#'][0]})");
        loadImagesWithCache(baseLayer, baseLayerInfo, layersInfo, ratio);
        layer.getDiffPixel(baseLayer, 0, void);
    }

    Func(getLayerInfo)(layersInfo:Array, baseInfo:Dictionary) {
        checkArgs
        var groups = %[];
        var diffs = %[];
        var layers = %[];

        for (var i = 0; i < layersInfo.count; ++i) {
            var layerInfo = layersInfo[i];
            var noImage =  (layerInfo.delims[";"].find("noimage") >= 0);
            if (!isOutputLayer(layerInfo)) continue;
            var group = layerInfo.delims["^"][0];
            for (var j = 0; j < layerInfo.delims["@"].count; ++j) {
                var diff = layerInfo.delims["@"][j];
                if (diff == void) {
                    Debug.message("[警告]空白の@指定:" + layerInfo.name);
                    continue;
                }
                if (diffs[diff] === void) {
                    diffs[diff] = [];
                    groups[diff] = group;
                }
                if (!noImage) {
                    diffs[diff].add(layerInfo.filename);

                    with (layers[layerInfo.filename] = %[]) {
                        .layerNumber = layerInfo.layerNumber;
                        .type = layerInfo.type;
                        .opacity = layerInfo.opacity;
                        .offsetX = layerInfo.offsetX;
                        .offsetY = layerInfo.offsetY;
                        .width = layerInfo.offsetWidth;
                        .height = layerInfo.offsetHeight;
                        var cond = layerInfo.delims["$"].join("&&");
                        .condition = cond === "" ? void : cond;
                    }
                }
            }
        }
        return %[
            groups : groups,
            diffs : diffs,
            layers : layers,
            width : baseInfo.trimRect.width,
            height : baseInfo.trimRect.height,
        ];
    }

    Func(getTachieInfo)(layersInfo:Array, baseInfo:Dictionary) {
        checkArgs
        var info = %[];
        var commandKey = [], command = %[];
        for (var i = 0; i < layersInfo.count; ++i) {
            var layerInfo = layersInfo[i];
            var key = layerInfo.delims["^"][0];
            var commands = layerInfo.delims["@"];
            for (var j = 0; j < commands.count; ++j) {
                var c = commands[j];
                if (c === "base") continue;
                if (commandKey.find(key) < 0) { commandKey.add(key); }
                if (command[key] === void) { command[key] = []; }
                if (command[key].find(c) < 0) { command[key].add(c); }
            }
        }
        info.key = commandKey;
        info.command = command;
        info.charName = baseInfo.charName;
        return info;
    }

    Func(getEventInfo)(layersInfo:Array, baseInfo:Dictionary, info:Dictionary) {
        checkArgs
        var group = baseInfo.groupName;
        var event = baseInfo.baseName;
        if (info.group.find(group) < 0) { info.group.add(group); }
        if (info.event[group] == void) { info.event[baseInfo.groupName] = []; }
        if (info.event[group].find(event) < 0) { info.event[group].add(event); info.event[group].sort(); }
        if (info.command[event] == void) { info.command[event] = %[]; }

        var commandKey = [], command = %[];
        for (var i = 0; i < layersInfo.count; ++i) {
            var layerInfo = layersInfo[i];
            var key = layerInfo.delims["^"][0];
            for (var j = 0; j < layerInfo.delims["@"].count; ++j) {
                var c = layerInfo.delims["@"][j];
                if (c === "base") continue;
                if (commandKey.find(key) < 0) { commandKey.add(key); }
                if (command[key] === void) { command[key] = []; }
                if (command[key].find(c) < 0) { command[key].add(c); }
            }
        }
        info.command[event].commandKey = commandKey;
        info.command[event].command = command;

        return info;
    }
}
