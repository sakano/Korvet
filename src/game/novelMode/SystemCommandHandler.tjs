// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

ClassExtends(SystemCommandHandler, AbstractCommandHandler)
{
    property inTransition { getter { return this._inTransition; } }

    Func(registerTransInfo)(transInfo:Dictionary) {
        checkArgs
        if (this._transInfo === void || this._transInfo.priority <= transInfo.priority) {
            this._transInfo = transInfo;
        }
    }

    OverrideFunc(onCommand)(command:Dictionary) {
        var method = this._commandMethods[command.name];
        if (method === void) return;
        return method(command);
    }

    OverrideFunc(reset)() {
        assert(this._transInfo === void)
        assert(!this._inTransition)
        this._transInfo = void;
        this._inTransition = false;
    }



    var _commandMethods = %[
        __beginpage : _beginPageCommandImpl,
        __endpage   : _endPageCommandImpl,
        update      : _updateCommandImpl,
        waittrans   : _waitTransCommandImpl,
        waitaction  : _waitActionCommandImpl,
        next        : _nextCommandImpl,
    ];

    var _transInfo;
    var _inTransition = false;

    property _foreLayer { getter { return this._mode._foreLayer; } }
    property _backLayer { getter { return this._mode._backLayer; } }

    Constructor(mode:NovelMode) {
        checkArgs
        super.AbstractCommandHandler(mode);
    }

    Finalize() {
        super.finalize();
        invalidate this._commandMethods;
    }

    Func(_trigger)() { this._mode._trigger(...); }

    Func(_updateCommandImpl)() {
        this._trigger("update");
        return this._beginTransition();
    }

    Func(_beginPageCommandImpl)() {
        return this._updateCommandImpl();
    }

    Func(_endPageCommandImpl)() {
        doNothing();
    }

    Func(_waitTransCommandImpl)() {
        if (!this._inTransition) return;

        if (this._noDraw) {
            this._mode.skipTransition();
            return;
        }

        return %[
            interrupt : true,
            sequences : [
                global.SequenceRunner.sequence()
                    .wait("transCompleted", "click")
                    .call(this._mode.skipTransition)
                    .call(this._mode.resumeCommandLoopAsync)
            ]
        ];
    }

    Func(_beginTransition)() {
        assert(!this._inTransition)
        if (this._transInfo === void) return;

        this._mode.onTransitionBegin();

        this._inTransition = true;
        var info = this._transInfo;
        this._transInfo = void;
        return %[ sequences : [
            global.SequenceRunner.sequence()
                .beginSkip("skipTrans")
                    .transition(this._foreLayer, this._backLayer, info.type, info.option)
                    //.call(global.gAsyncCaller.call, this._onTransitionCompleted)
                    .call(this._onTransitionCompleted)
                .endSkip()
        ]];
    }

    Func(_onTransitionCompleted)() {
        assert(this._inTransition)
        this._inTransition = false;
        this._trigger("transCompleted");
        this._mode.onTransitionCompleted();
    }

    Func(_waitActionCommandImpl)() {
        if (!this._mode.inAction) return;

        if (this._noDraw) {
            this._mode.skipAction();
            return;
        }

        return %[
            interrupt : true,
            sequences : [
                global.SequenceRunner.sequence()
                    .wait("allActionCompleted", "click")
                    .call(this._mode.skipAction)
                    .call(this._mode.resumeCommandLoopAsync)
            ]
        ];
    }

    Func(_nextCommandImpl)(command:Dictionary) {
        checkArgs
        var file = command.attributeValues.file;
        var label = command.attributeValues.label;
        var error = this._mode.loadScript(file, label);
        if (!success(error)) {
            global.gScriptLogger.onScriptError(error.message);
            return %[ interrupt:true ];
        }
    }
}
