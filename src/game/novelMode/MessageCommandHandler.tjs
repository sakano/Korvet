// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

ClassExtends(MessageCommandHandler, AbstractDrawableCommandHandler)
{
    OverrideFunc(onCommand)(commandInfo:Dictionary) {
        var method = this._commandMethods[commandInfo.name];
        if (method === void) return void;
        return method(commandInfo);
    }



    var _commandMethods = %[
        __beginpage : _beginPageCommandImpl,
        __endpage   : _endPageCommandImpl,
        __ch        : _chCommandImpl,
    ];

    var _currentText = "";
    var _drawnTextIndex = 0;

    Constructor(mode:NovelMode) {
        checkArgs
        super.AbstractDrawableCommandHandler(mode);
    }

    Finalize() {
        super.finalize();
        invalidate this._commandMethods;
    }
    
    Func(_beginPageCommandImpl)(commandInfo:Dictionary) {
        this._currentText = "";
        this._drawnTextIndex = 0;
    }

    Func(_endPageCommandImpl)(commandInfo:Dictionary) {
        assert(this._currentText.length > 0)
        return %[
            interrupt : true,
            sequences : [
                global.SequenceRunner.sequence()
                    .beginSkip("click")
                        .beginLoop(this._currentText.length)
                            .factory(this._sequenceFactory)
                        .endLoop()
                    .endSkip()
                    .wait("click")
                    .call(this._mode.onDrawMessageCompleted)
            ]
        ];
    }

    Func(_chCommandImpl)(commandInfo:Dictionary) {
        var text;
        for (var i = 0; i < commandInfo.keys.count; ++i) {
            if (commandInfo.keys[i] === "text") {
                text = commandInfo.values[i];
                break;
            }
        }
        this._currentText += text;
    }

    Func(_sequenceFactory) {
        return global.SequenceRunner.sequence()
            .call(this._drawCharacter, ++this._drawnTextIndex)
            .wait(500);
    }

    Func(_drawCharacter)(index:int) {
        global.Debug.message(this._currentText.substr(0, index));
    }
}
