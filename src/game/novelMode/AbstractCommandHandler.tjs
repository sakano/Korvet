// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

Class(AbstractCommandHandler)
{
    AbstractFunc(onCommand)(command:Dictionary)



    var _mode;

    Constructor(mode:NovelMode) {
        checkArgs
        this._mode = mode;
    }

    Finalize() {}

    Func(_notifyScriptError)(message:string, args*) {
        checkArgs
        this._mode.onScriptError(expandMessage(...));
    }

    Func(_notifyIllegalAttributeValueError)(argValue:any+, argName:string) {
        checkArgs
        this._notifyScriptError(ASSERT_SCRIPT_ATTRIBUTE_VALUE_ILLEGAL, "ARG_NAME", argName, "ARG_VALUE", argValue);
    }

    Func(_notifyUnusedAttributeError)(argValue:any+, argName:string) {
        checkArgs
        this._notifyScriptError(ASSERT_SCRIPT_ATTRIBUTE_UNUSED, "ARG_NAME", argName, "ARG_VALUE", argValue);
    }

    Func(_notifyAttributeValueNotSpecifiedError)(argName:string) {
        checkArgs
        this._notifyScriptError(ASSERT_SCRIPT_ATTRIBUTE_VALUE_REQUIRED, "ARG_NAME", argName);
    }

    Func(_validateAttributeSpecified)(value:any+, argName:string, defaultValue:any) {
        checkArgs
        if (value !== void && value !== null) return value;
        this._notifyScriptError(ASSERT_SCRIPT_ATTRIBUTE_REQUIRED, "ARG_NAME", argName);
        return defaultValue;
    }

    Func(_validateAttributeValueSpecified)(value:any+, argName:string, defaultValue:string) {
        checkArgs
        if (value === null) {
            this._notifyAttributeValueNotSpecifiedError("ARG_NAME", argName);
            return defaultValue;
        }
        return value;
    }

    Func(_validateAttributeValueNotSpecified)(value:any+, argName:string) {
        checkArgs
        if (value !== null) {
            this._notifyScriptError(ASSERT_SCRIPT_ATTRIBUTE_VALUE_UNUSED, "ARG_NAME", argName);
        }
        return null;
    }

    Func(_validateAttributeValueInteger)(value:any+, argName:string, min:int+, max:int+, defaultValue:int+) {
        checkArgs
        assert(min < max || min === void || max === void)
        assert(min === void || defaultValue === void || min <= defaultValue)
        assert(max === void || defaultValue === void || max >= defaultValue)
        if (value === void) {
            assert(defaultValue !== void)
            return defaultValue;
        }
        var intValue = (int)value;
        if (min !== void && intValue < min) {
            this._notifyScriptError(ASSERT_SCRIPT_ATTRIBUTE_VALUE_OUT_OF_RANGE, "ARG_NAME", argName, "ARG_VALUE", value);
            return min;
        }
        if (max !== void && max < intValue) {
            this._notifyScriptError(ASSERT_SCRIPT_ATTRIBUTE_VALUE_OUT_OF_RANGE, "ARG_NAME", argName, "ARG_VALUE", value);
            return max;
        }
        return intValue;
    }
}
