// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

ClassExtends(SpriteCommandHandler, AbstractDrawableCommandHandler)
{
    m4_define(&--SPRITE_PROPERTY--&,
        property $1 {
            setter(value) {
                typeNumber(value)
                if (this._inTransition) {
                    this._spriteBack.$1 = value;
                } else {
                    this._spriteFore.$1 = value;
                }
            }
            getter {
                return this._inTransition ? this._spriteBack.$1 : this._spriteFore.$1;
            }
        })
    SPRITE_PROPERTY(x)
    SPRITE_PROPERTY(y)
    SPRITE_PROPERTY(originX)
    SPRITE_PROPERTY(originY)
    SPRITE_PROPERTY(scaleX)
    SPRITE_PROPERTY(scaleY)
    SPRITE_PROPERTY(shearX)
    SPRITE_PROPERTY(shearY)
    SPRITE_PROPERTY(angle)
    SPRITE_PROPERTY(offsetX)
    SPRITE_PROPERTY(offsetY)
    property alignment {
        setter(value) {
            if (this._inTransition) {
                this._spriteBack.alignment = value;
            } else {
                this._spriteFore.alignment = value;
            }
        }
        getter {
            return this._inTransition ? this._spriteBack.alignment : this._spriteFore.alignment;
        }
    }

    OverrideFunc(beforeTransition)() {
        this._updateSpriteBack();
        this._spriteBack.visible = this._visible;
    }

    OverrideFunc(afterTransition)() {
        this._spriteFore <-> this._spriteBack;
        this.draw(true);
    }

    OverrideFunc(draw)(force:bool = false) {
        checkArgs
        if (this._spriteFore.redraw || force) {
            if (this._spriteFore.visible) {
                this._spriteFore.draw(true);
            }
        }
    }

    OverrideFunc(drawInTransition)() {
        if (this._spriteFore.redraw) {
            if (this._spriteFore.visible) {
                this._spriteFore.draw(true);
            }
        }
        if (this._spriteBack.redraw) {
            if (this._spriteBack.visible) {
                this._spriteBack.draw(true);
            }
        }
    }

    Func(setParentMatrix)(matrix:HierarchicalMatrix) {
        checkArgs
        this._spriteFore.setParentMatrix(...);
        this._spriteBack.setParentMatrix(...);
    }

    OverrideFunc(onCommand)(command:Dictionary) {
        checkArgs
        if (this._isIgnoreCommand(command)) return;

        var result = %[
            sequences : []
        ];
        var attrNames = command.attributeNames;
        var attrValues = command.attributeValues;

        for (var i = 0; i < attrNames.count; ++i) {
            var attrName = attrNames[i];
            var attrValue = attrValues[attrName];

            // メソッドが存在しない属性は何もしない
            var method = this._getAttributeMethod(attrName);
            if (method === void) continue;

            // 属性に対応するメソッドを呼出し
            var methodResult = method(attrValue, attrName, attrValues);

            if (methodResult === void) continue;
            // 優先度の高いトランジション情報が返されたらresult.transに記録
            if (methodResult.trans !== void) {
                if (result.trans === void || result.trans.priority <= methodResult.trans.priority) {
                    result.trans = methodResult.trans;
                }
            }
            // シーケンスが返されたらresult.sequencesに記録
            if (methodResult.sequences !== void) {
                assert(methodResult.sequences.count > 0)
                result.sequences.push(methodResult.sequences*);
            }
        }

        // シーケンスが1つも存在しなければresult.sequencesを削除
        if (result.sequences.count === 0) {
            delete result.sequences;
        }

        return result;
    }



    var _visible = false;

    var _spriteFore;
    var _spriteBack;

    var _defaultTransTime = 500;
    var _transitionTypes = %[
        fade : TransitionType_Crossfade,
        crossfade : TransitionType_Crossfade,
        universal : TransitionType_Universal,
        scroll : TransitionType_Scroll,
    ];

    var _showHideAutoTransition;

    var _attributeMethods;

    Constructor(mode:NovelMode, parentLayerFore:Layer, parentLayerBack:Layer) {
        checkArgs
        super.AbstractDrawableCommandHandler(mode);

        this._spriteFore = this._createSprite(parentLayerFore);
        this._spriteBack = this._createSprite(parentLayerBack);

        this._attributeMethods = this._createAttributeMethods();
    }

    Finalize() {
        invalidate this._spriteFore;
        invalidate this._spriteBack;
        invalidate this._transitionTypes;
        invalidate this._attributeMethods;
    }

    Func(_createSprite)(parentLayer:Layer) {
        checkArgs
        var layer = new global.Layer(parentLayer.window, parentLayer);
        layer.setSize(parentLayer.width, parentLayer.height);
        layer.visible = false;
        return new global.Sprite(layer, true);
    }

    Func(_createAttributeMethods)() {
        return %[
            x       : this._transformCommandImpl incontextof %[ self:this, propertyName:"x" ],
            y       : this._transformCommandImpl incontextof %[ self:this, propertyName:"y" ],
            originx : this._transformCommandImpl incontextof %[ self:this, propertyName:"originX" ],
            originy : this._transformCommandImpl incontextof %[ self:this, propertyName:"originY" ],
            scalex  : this._transformCommandImpl incontextof %[ self:this, propertyName:"scaleX" ],
            scaley  : this._transformCommandImpl incontextof %[ self:this, propertyName:"scaleY" ],
            shearx  : this._transformCommandImpl incontextof %[ self:this, propertyName:"shearX" ],
            sheary  : this._transformCommandImpl incontextof %[ self:this, propertyName:"shearY" ],
            angle   : this._transformCommandImpl incontextof %[ self:this, propertyName:"angle" ],
            show    : this._showHideCommandImpl incontextof %[ self:this, newVisible:true ],
            hide    : this._showHideCommandImpl incontextof %[ self:this, newVisible:false ],
            fade    : this._fadeCommandImpl,
            trans   : this._transCommandImpl,
        ];
    }

    AbstractFunc(_isIgnoreCommand)(command:Dictionary)

    Func(_getAttributeMethod)(attrName:string) {
        checkArgs
        return this._attributeMethods[attrName];
    }

    Func(_updateSpriteBack)() {
        checkArgs
        // spriteForeをspriteBackにコピー
        with (this._spriteBack) {
            var src = this._spriteFore;
            .x = src.x;
            .y = src.y;
            .originX = src.originX;
            .originY = src.originY;
            .scaleX = src.scaleX;
            .scaleY = src.scaleY;
            .shearX = src.shearX;
            .shearY = src.shearY;
            .angle = src.angle;
            .offsetX = src.offsetX;
            .offsetY = src.offsetY;
            .alignment = src.alignment;
            .visible = src.visible;
        }
    }

    Func(_transformCommandImpl)(attrValue:string?, attrName:string, attrValues:Dictionary) {
        checkArgs
        if (attrValues.time === void) {
            return %[ sequences : [
                    global.SequenceRunner.sequence().wait("update").setValue(&self[propertyName], (int)attrValue)
            ] ];
        } else {
            var time = global.gScriptLogger.validateAttributeValueSpecified(attrValues.time, "time", "1");
            time = global.gScriptLogger.validateAttributeValueInteger(time, "time", 1, void);
            return %[ sequences : [
                    global.SequenceRunner.sequence().wait("update")
                        .call(self._mode.onActionBegin)
                        .beginSkip("skipAction")
                            .action(&self[propertyName]).to((int)attrValue, time)
                        .endSkip()
                        .call(self._mode.onActionEnd)
            ]];
        }
    }

    Func(_showHideCommandImpl)(attrValue:string?, attrName:string) {
        checkArgs
        global.gScriptLogger.validateAttributeValueNotSpecified(attrValue, attrName);
        self._visible = newVisible;
        return %[ trans : self._showHideAutoTransition ];
    }

    Func(_fadeCommandImpl)(attrValue:string?) {
        checkArgs
        attrValue = global.gScriptLogger.validateAttributeValueSpecified(attrValue, "fade", (string)this._defaultTransTime);
        attrValue = global.gScriptLogger.validateAttributeValueInteger(attrValue, "fade", 1, void);
        return %[
            trans : %[
                priority : NovelModeTransPriority_Specified,
                type : TransitionType_Crossfade,
                option: %[
                    time : attrValue
                ]
            ]
        ];
    }

    Func(_transCommandImpl)(attrValue:string?, attrName:string, attrValues:Dictionary) {
        checkArgs
        var type = this._transitionTypes[attrValue];

        // 存在しないトランジションの種類ならエラー
        if (type === void) {
            global.gScriptLogger.notifyIllegalAttributeValueError(attrValue, "trans");
            type = TransitionType_Crossfade;
        }

        // トランジション用の属性をoptionに入れていく
        var option = %[];

        // time属性
        option.time = global.gScriptLogger.validateAttributeSpecified(attrValues.time, "time", (string)this._defaultTransTime);
        option.time = global.gScriptLogger.validateAttributeValueInteger(option.time, "time",  1, void);

        switch(type) {
        case TransitionType_Crossfade:
            doNothing();
            break;
        case TransitionType_Universal:
            // rule属性
            var rule = global.gScriptLogger.validateAttributeSpecified(attrValues.rule, "rule", null);
            rule = global.gScriptLogger.validateAttributeValueSpecified(rule, "rule", null);
            if (rule === null) {
                type = TransitionType_Crossfade;
                break;
            }
            option.rule = rule;
            // vague属性
            option.vague = global.gScriptLogger.validateAttributeValueSpecified(attrValues.vague, "vague", "128");
            option.vague = global.gScriptLogger.validateAttributeValueInteger(option.vague, "vague", 0, void);
            break;
        case TransitionType_Scroll:
            // dir属性
            switch(attrValues.dir) {
            case "left":  option.from = sttRight;  break;
            case "up":    option.from = sttBottom; break;
            case "right": option.from = sttLeft;   break;
            case "down":  option.from = sttTop;    break;
            case void:    option.from = sttLeft;   break;
            case null:
                global.gScriptLogger.notifyAttributeValueNotSpecifiedError("dir");
                option.from = sttLeft;
                break;
            default:
                global.gScriptLogger.notifyIllegalAttributeValueError(attrValues.dir, "dir");
                option.from = sttLeft;
                break;
            }
            // scroll属性
            switch(attrValues.scroll) {
            case "slide": option.stay = ststNoStay;  break;
            case "in":    option.stay = ststStayDest; break;
            case "out":   option.stay = ststStaySrc;  break;
            case void:    option.stay = ststNoStay;   break;
            case null:
                global.gScriptLogger.notifyAttributeValueNotSpecifiedError("scroll");
                option.stay = ststNoStay;
                break;
            default:
                global.gScriptLogger.notifyIllegalAttributeValueError(attrValues.scroll, "scroll");
                option.stay = ststNoStay;
                break;
            }
            break;
        default:
            assert(false)
        }
        return %[
            trans : %[
                priority : NovelModeTransPriority_Specified,
                type : type,
                option: option
            ]
        ];
    }
}
