// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

ClassExtends(StageCommandHandler, SpriteCommandHandler)
{
    var _stageCommandHandlers = %[
        place : this._changeFileCommandImpl incontextof %[ self:this, targetName:"_place" ],
        stime : this._changeFileCommandImpl incontextof %[ self:this, targetName:"_time" ],
        size  : this._changeFileCommandImpl incontextof %[ self:this, targetName:"_size" ],
    ];

    OverrideFunc(onCommand)(commandInfo:Dictionary) {
        checkArgs
        if (commandInfo.name !== "stage") return void;

        var sequences = [];
        var keys = commandInfo.keys;
        var values = commandInfo.values;
        var map = commandInfo.map;
        for (var i = 0; i < keys.count; ++i) {
            var key = keys[i];
            var value = values[i];
            var handler = this._spriteCommandHandlers[key];
            if (handler === void) {
                handler = this._stageCommandHandlers[key];
            }
            if (handler === void) continue;
            var result = handler(value, map, key);
            if (result === void) continue;
            if (result.sequences !== void) {
                sequences.push(result.sequences*);
            }
        }

        var result = %[];
        if (this._fileChanged) {
            result.trans = %[
                priority : 3,
                type : TransitionType_Crossfade,
                option: %[
                    time:2000,
                ]
            ];
        }
        if (sequences.count > 0) {
            result.sequences = sequences;
        }

        return result;
    }

    OverrideFunc(beforeTransition)() {
        super.beforeTransition();
        if (this._fileChanged) {
            this._fileChanged = false;
            this._spriteBack.load(this._getFilename());
        } else if (this._spriteFore.filename != this._spriteBack.filename) {
            this._spriteBack.load(this._spriteFore.filename);
        }
    }



    var _place;
    var _time;
    var _size;
    var _fileChanged = false;

    Constructor(mode:NovelMode, parentLayerFore:Layer, parentLayerBack:Layer) {
        checkArgs
        super.SpriteCommandHandler(...);
    }

    Finalize() {
        super.finalize();
    }

    Func(_getFilename)() {
        typeNotVoid(this._place)
        typeNotVoid(this._time)
        typeNotVoid(this._size)
        return @"bg${this._place}_${this._time}_${this._size}";
    }

    Func(_changeFileCommandImpl)(value, map, key) {
        var validatedValue = self._validateArgumentStringLength(value, key);
        if (validatedValue === self[targetName]) return;
        self[targetName] = validatedValue;
        self._fileChanged = true;
    }
}
