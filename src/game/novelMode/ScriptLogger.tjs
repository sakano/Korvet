// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

Class(ScriptLogger)
{
    property currentStorage {
        getter { return this._parser.currentStorage; }
    }

    property currentLineNumber {
        getter { return this._parser.currentLineNumber; }
    }

    Func(setParser)(parser:KorvetParser) {
        checkArgs
        this._parser = parser;
    }

    Func(onScriptError)(message:string, args*) {
        checkArgs
        var header = global.expandMessage(ASSERT_SCRIPT_HEADER,
            "FILE", this.currentStorage,
            "LINE", this.currentLineNumber);
        global.gLog.warn(header + expandMessage(...));
    }

    Func(notifyIllegalAttributeValueError)(attrValue:string?, attrName:string) {
        checkArgs
        this.onScriptError(ASSERT_SCRIPT_ATTRIBUTE_VALUE_ILLEGAL, "ATTR_NAME", attrName, "ATTR_VALUE", attrValue);
    }

    Func(notifyUnusedAttributeError)(attrValue:string?, attrName:string) {
        checkArgs
        this.onScriptError(ASSERT_SCRIPT_ATTRIBUTE_UNUSED, "ATTR_NAME", attrName, "ATTR_VALUE", attrValue);
    }

    Func(notifyAttributeNotSpecifiedError)(attrName:string) {
        checkArgs
        this.onScriptError(ASSERT_SCRIPT_ATTRIBUTE_REQUIRED, "ATTR_NAME", attrName);
    }

    Func(notifyAttributeValueNotSpecifiedError)(attrName:string) {
        checkArgs
        this.onScriptError(ASSERT_SCRIPT_ATTRIBUTE_VALUE_REQUIRED, "ATTR_NAME", attrName);
    }

    Func(notifyAttributeDuplicatedError)(attrName:string) {
        checkArgs
        this.onScriptError(ASSERT_SCRIPT_ATTRIBUTE_DUPLICATED, "ATTR_NAME", attrName);
    }

    Func(validateAttributeSpecified)(value:any+, attrName:string, defaultValue:any) {
        checkArgs
        if (value === void) {
            this.notifyAttributeNotSpecifiedError(attrName);
            return defaultValue;
        }
        return value;
    }

    Func(validateAttributeValueSpecified)(value:any+, attrName:string, defaultValue:string) {
        checkArgs
        if (value === null) {
            this.notifyAttributeValueNotSpecifiedError(attrName);
            return defaultValue;
        }
        return value;
    }

    Func(validateAttributeValueNotSpecified)(value:any+, attrName:string) {
        checkArgs
        if (value !== null) {
            this.onScriptError(ASSERT_SCRIPT_ATTRIBUTE_VALUE_UNUSED, "ATTR_NAME", attrName);
        }
        return null;
    }

    Func(validateAttributeValueInteger)(value:any+, attrName:string, min:int+, max:int+, defaultValue:int+) {
        checkArgs
        assert(min < max || min === void || max === void)
        assert(min === void || defaultValue === void || min <= defaultValue)
        assert(max === void || defaultValue === void || max >= defaultValue)
        if (value === void) {
            assert(defaultValue !== void)
            return defaultValue;
        }
        var intValue = (int)value;
        if (min !== void && intValue < min) {
            this.onScriptError(ASSERT_SCRIPT_ATTRIBUTE_VALUE_OUT_OF_RANGE, "ATTR_NAME", attrName, "ATTR_VALUE", value);
            return min;
        }
        if (max !== void && max < intValue) {
            this.onScriptError(ASSERT_SCRIPT_ATTRIBUTE_VALUE_OUT_OF_RANGE, "ATTR_NAME", attrName, "ATTR_VALUE", value);
            return max;
        }
        return intValue;
    }



    var _parser;

    Constructor() {
    }

    Finalize() {
    }
}
