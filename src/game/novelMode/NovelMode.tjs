// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

ClassExtends(NovelMode, GameMode)
{
    property inTransition { getter { return this._systemCommandHandler._inTransition; } }
    property inAction { getter { return this._actionCount > 0; } }
    property noDraw { getter { return this._noDraw; } }

    Func(onTick)() {
        this._runner.onTick(...);
        if (this.inTransition) {
            for (var i = 0; i < this._drawables.count; ++i) {
                this._drawables[i].drawInTransition();
            }
        } else {
            for (var i = 0; i < this._drawables.count; ++i) {
                this._drawables[i].draw();
            }
        }
    }

    Func(loadScript)(path:string+, label:string+, skipEndPageCount:int = 0) {
        checkArgs
        assert(path === void || path.length > 0)
        assert(label === void || label.length > 0)
        assert(skipEndPageCount >= 0)
        // ファイルが指定されていたら読み込む
        if (path !== void) {
            gLog.info(expandMessage(INFO_NOVEL_MODE_LOAD_SCRIPT, "PATH", path));
            this._parser.initStorage(path);
        }
        // ラベルが指定されていたらジャンプ
        if (label !== void) {
            gLog.info(expandMessage(INFO_NOVEL_MODE_LABEL_JUMP, "LABEL", label));
            this._parser.goToLabel(label);
        }
        // ページが指定されていたらスキップ
        if (skipEndPageCount > 0) {
            gLog.info(expandMessage(INFO_NOVEL_MODE_PAGE_SKIP, "COUNT", skipEndPageCount));
            for (var pageCount = 0; pageCount < skipEndPageCount;) {
                var command = this._parser.getNextCommand();
                if (command === null) {
                    throw new global.KorvetException(
                        expandMessage(EXCEPTION_NOVEL_MODE_END_OF_SCRIPT_WHILE_PAGE_SKIP, "PATH", path, "LABEL", label, "COUNT", skipEndPageCount));
                }
                if (command.name == "__endpage") {
                    ++pageCount;
                }
            }
        }

        this._reset();
    }

    Func(deserialize)(path:string, page:int = 0) {
        checkArgs
        assert(path.length > 0)
        assert(page >= 0)

        this._reset();

        var compiledPath = Storages.chopStorageExt(path) + ".krb";
        var data = Scripts.evalStorage(compiledPath);
        var dic = data[page];

        if (dic === void) {
            throw new global.KorvetException(expandMessage(EXCEPTION_NOVEL_MODE_INVALID_PAGE, "PATH", path, "COUNT", page));
        }

        this.loadScript(path, void, dic.pageCount);

        this._stageCommandHandler.deserialize(dic.stage);
        this._tachieCommandHandler.deserialize(dic.tachie);
        this._messageCommandHandler.deserialize(dic.message);

        this._systemCommandHandler.registerTransInfo(%[
            priority : NovelModeTransPriority_Specified,
            type : TransitionType_Crossfade,
            option: %[
                time : 1
            ]
        ]);
        this._doUpdateCommand();
        this.skipTransition();
        this.resumeCommandLoopAsync();
    }

    Func(resumeCommandLoopAsync)() {
        global.gAsyncCaller.callOnce(this._resumeCommandLoop);
    }

    Func(onDrawMessageCompleted)() {
        // メッセージを最後まで描画し終わったときに呼ばれる
        // クリックされたら遅延実行、アクション、トランジションの実行をスキップしてコマンド実行を再開
        global.gAsyncCaller.call(this._runner.run, global.SequenceRunner.sequence()
            .wait("click")
            .call(this.skipDelay)
            .call(this.skipAction)
            .call(this.skipTransition)
            .call(this.resumeCommandLoopAsync));
    }

    Func(repageWhileDrawingMessage)() {
        // メッセージの描画の途中で次のページに進む必要があるときに呼ばれる
        // クリックされたらメッセージ描画を再開
        global.gAsyncCaller.call(this._runner.run, global.SequenceRunner.sequence()
            .wait("click")
            .factory(this._messageCommandHandler.createResumeDrawingMessageSequence));
    }

    Func(onTransitionBegin)() {
        skipTransition();
        for (var i = 0; i < this._drawables.count; ++i) {
            this._drawables[i].beforeTransition();
        }
    }

    Func(skipTransition)() {
        this._trigger("skipTrans");
    }

    Func(onTransitionCompleted)() {
        this._foreLayer <-> this._backLayer;
        for (var i = 0; i < this._drawables.count; ++i) {
            this._drawables[i].afterTransition();
        }
    }

    Func(skipAction)() {
        this._trigger("skipAction");
    }

    Func(onActionBegin)() {
        ++this._actionCount;
    }

    Func(onActionEnd)() {
        --this._actionCount;
        assert(this._actionCount >= 0)
        if (this._actionCount <= 0) {
            this._actionCount = 0;
            this._trigger("allActionCompleted");
        }
    }

    Func(skipDelay)() {
        this._trigger("skipDelay");
    }



    var _parser;
    var _runner;

    var _commandHandlers = [];
    var _drawables = [];
    var _messageCommandHandler;

    var _screenLayer;
    var _foreLayer;
    var _backLayer;
    var _actionCount = 0;

    var _noDraw = false;

    Constructor(game:Game, currentTick:int) {
        checkArgs
        super.GameMode(game);

        this.bindMapWindowEvent(%[
            ObservableWindowEventType_LeftClick   => this._onLeftClick,
            ObservableWindowEventType_RightClick  => this._onRightClick,
            ObservableWindowEventType_MiddleClick => this._onMiddleClick,
            ObservableWindowEventType_MouseWheel  => this._onMouseWheel
        ]);

        this._runner = new global.SequenceRunner(currentTick);

        this._screenLayer = getScreen();
        this._screenLayer.visible = true;

        this._foreLayer = this._createParentLayer(this._screenLayer);
        this._backLayer = this._createParentLayer(this._screenLayer);
        this._foreLayer.visible = true;

        this._initParser();
        this._initCommandHandlers();

        global.gScriptLogger.setParser(this._parser);

        global.gConfig.newValue(ConfigValueType_NoDraw, this._noDraw, LMD(value:bool) {
            checkArgs
            this._noDraw = !!value;
        } incontextof this);
    }

    Finalize() {
        super.finalize();
        invalidate this._runner;
        invalidate this._parser;
        this._commandHandlers.dispose();
        invalidate this._commandHandlers;
        this._drawables.dispose();
        invalidate this._drawables;
        invalidate this._screenLayer;
        invalidate this._foreLayer;
        invalidate this._backLayer;
        invalidate this._worldMatrix;
    }

    Func(_initParser)() {
        this._parser = new global.KorvetParser();
        this._parser.setModule(new global.MacroParserModule(), PriorityQueue_Highest);
        this._parser.setModule(new global.PageBeginEndParserModule(), PriorityQueue_Normal);
    }

    Func(_initCommandHandlers)() {
        this._systemCommandHandler = new global.SystemCommandHandler(this);
        this._commandHandlers.add(this._systemCommandHandler);

        this._stageCommandHandler = new global.StageCommandHandler(this, this._foreLayer, this._backLayer);
        this._commandHandlers.add(_stageCommandHandler);
        this._drawables.add(_stageCommandHandler);

        this._tachieCommandHandler = new global.TachieCommandHandler(this, this._foreLayer, this._backLayer, "楓");
        this._commandHandlers.add(_tachieCommandHandler);
        this._drawables.add(_tachieCommandHandler);

        var messageCommandHandler = new global.MessageCommandHandler(this, this._foreLayer, this._backLayer);
        this._commandHandlers.add(messageCommandHandler);
        this._drawables.add(messageCommandHandler);
        this._messageCommandHandler = messageCommandHandler;
    }

    Func(_reset)() {
        this.skipDelay();
        this.skipAction();
        this.skipTransition();
        FOR_EACH(h, this._commandHandlers) {
            h.reset();
        }
    }

    Func(_createTargetLayer)(parentLayer:Layer) {
        var targetLayer = new global.Layer(parentLayer.window, parentLayer);
        targetLayer.setSize(parentLayer.width, parentLayer.height);
        targetLayer.visible = true;
        return targetLayer;
    }

    Func(_createParentLayer)(parentLayer:Layer) {
        var layer = new global.Layer(parentLayer.window, parentLayer);
        layer.setSize(parentLayer.width, parentLayer.height);
        layer.focusable = false;
        layer.ignoreHintSensing = true;
        layer.useAttention = false;
        //layer.type = ltBinder;
        layer.face = dfAuto;
        layer.setSize(parentLayer.width, parentLayer.height);
        layer.fill(0);
        //layer.hasImage = false;
        layer.visible = false;
        return layer;
    }

    Func(_trigger)(label:string) {
        checkArgs
        this._runner.trigger(...);
    }

    Func(_waitTrigger)(label:string, callback:Function, args*) {
        checkArgs
        this._runner.run(global.SequenceRunner.sequence().wait(label).call(callback, args*));
    }

    Func(_resumeCommandLoop)() {
        while (true) {
            // 次のコマンドを得る
            var command = _parser.getNextCommand();

            // コマンドが得られなかったら停止
            if (command === null) break;

            // コマンドを実行する
            var interrupt = this._doCommand(command);
            if (interrupt) return;
        }
    }

    Func(_doCommand)(command:Dictionary) {
        checkArgs
        // delay属性が存在するなら遅延実行
        if (command.attributeValues.delay !== void) {
            var delayTime = global.gScriptLogger.validateAttribute("1", "delay", command.attributeValues, AttributeType_Verified, AttributeValueType_Integer, 1);
            // delay属性を消去
            command.attributeNames.remove("delay");
            delete command.attributeValues.delay;
            // コマンドを実行
            this._runner.run(global.SequenceRunner.sequence()
                .wait("update")
                .beginSkip("skipDelay")
                    .wait(delayTime)
                    .call(this._doCommandImmediately, command)
                    .call(this._doUpdateCommand)
                .endSkip()
            );
            return false;
        }
        return this._doCommandImmediately(...);
    }

    Func(_doCommandImmediately)(command:Dictionary) {
        checkArgs
        // コマンドを_commandHandlersに通知して実行
        var interrupt = false;
        for (var i = 0; i < this._commandHandlers.count; ++i) {
            var result = this._commandHandlers[i].onCommand(command);
            if (result === void) continue;
            if (result.trans !== void) {
                this._systemCommandHandler.registerTransInfo(result.trans);
            }
            if (result.sequences !== void) for (var i = 0; i < result.sequences.count; ++i) {
                this._runner.run(result.sequences[i]);
            }
            if (result.interrupt) interrupt = true;
        }
        return interrupt;
    }

    Func(_doUpdateCommand)() {
        this._doCommandImmediately(%[
            name : "update",
            attributeNames : [],
            attributeValues : %[]
        ]);
    }

    Func(_onLeftClick)(x:int, y:int, shift:int) {
        this._trigger("click");
    }

    Func(_onRightClick)(x:int, y:int ,shift:int) {
        this._trigger("click");
    }

    Func(_onMiddleClick)(x:int, y:int, shift:int) {
        this._trigger("click");
    }

    Func(_onMouseWheel)(shift:int, delta:int, x:int, y:int) {
        this._trigger("click");
    }
}
