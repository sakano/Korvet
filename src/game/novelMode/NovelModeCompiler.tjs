// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

ClassExtends(NovelModeCompiler, NovelMode)
{
    Constructor(game:Game, currentTick:int) {
        checkArgs
        super.NovelMode(...);
    }

    // スクリプト読み込み時にコンパイルする
    OverrideFunc(loadScript)(path:string+, label:string+, page:int = 0) {
        checkArgs
        assert(path === void || path.length > 0)
        assert(label === void || label.length > 0)
        assert(page >= 0)
        var srcPath = path !== void ? path : this._parser.currentStorage;
        var compiledPath = Storages.chopStorageExt(path) + ".krb";
        // ファイルが存在しないか更新されていたらコンパイル
        if (!Storages.isExistentStorage(compiledPath)
            || Storages.getLastModifiedFileTime(Storages.getPlacedPath(srcPath)) != Storages.getLastModifiedFileTime(Storages.getPlacedPath(compiledPath))) {
                var error = compile(srcPath, compiledPath);
                if (!success(error)) {
                    return error;
                }
        }
        return super.loadScript(path, label, page);
    }

    Func(compile)(src:string, dest:string) {
        checkArgs
        global.gLog.info(expandMessage(INFO_NOVEL_MODE_BEGIN_COMPILE, "SRC", src, "DEST", dest));

        this._reset();

        var prevMode = global.gConfig.currentMode;
        global.gConfig.changeMode(ConfigMode_Compile);

        var error = super.loadScript(src);
        if (!success(error)) {
            global.gLog.fatal(error.message);
            return error;
        }

        var serialized = [];
        var pageCount = 0;
        while (true) {
            // 次のコマンドを得る
            var command = %[];
            var error = this._parser.getNextCommand(command);

            // パース中にエラーが発生したら停止
            if (!success(error)) {
                global.gScriptLogger.onScriptError(ASSERT_SCRIPT_PARSER_ERROR, "MES", error.message);
                return error;
            }

            // コマンドが得られなかったら停止
            if (command.isEmpty()) break;

            // コマンドを実行する
            var interrupt = this._doCommand(command);

            // コンパイル中は停止しないはず
            if (interrupt) {
                global.gLog.fatal(command.name);
            }
            assert(!interrupt)

            // ページごとに現在の状態を記録
            switch (command.name) {
            case "__endpage":
                // トランジションを停止
                this.skipTransition();

                // 現在の状態を記録
                var dic = %[];
                dic.stage = this._stageCommandHandler.serialize();
                dic.tachie = this._tachieCommandHandler.serialize();
                dic.message = this._messageCommandHandler.serialize();
                dic.pageCount = pageCount;
                serialized.add(dic);

                // 次のページに進む
                ++pageCount;
                this.skipDelay();
                this.skipAction();
                this.skipTransition();
                break;
            }
        }

        serialized.saveStruct(dest);
        assert(Storages.setLastModifiedFileTime(dest, Storages.getLastModifiedFileTime(Storages.getPlacedPath(src))))

        gConfig.changeMode(prevMode);

        return SUCCESS;
    }
}
