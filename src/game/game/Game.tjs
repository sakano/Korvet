// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

Class(Game)
{
    Func(bindWindowEvent)() { _window.bindEvent(...); }
    Func(bindMapWindowEvent)() { _window.bindMapEvent(...); }

    Func(getScreen)() {
        var layer = new Layer(this._window, this._window.primaryLayer);
        with (this._window.primaryLayer) {
            layer.absolute = this._layers.count * 10000;
            layer.focusable = false;
            layer.ignoreHintSensing = true;
            layer.useAttention = false;
            layer.type = ltBinder;
            layer.face = dfAuto;
            layer.setSize(.width, .height);
            layer.hasImage = false;
            layer.visible = false;
        }
        this._layers.add(layer);
        return layer;
    }



    var _window;
    var _mode;
    var _menu;
    var _currentTick;
    var _layers = [];

    Constructor() {
        this._currentTick = global.System.getTickCount();
        global.gAsyncCaller.callOnce(global.System.addContinuousHandler, this._onTick);

        this._window = new global.ResizableWindow(null, 1280, 720);

        this._mode = new global.NovelMode(this, this._currentTick);
        this._mode.initialize();

        this._menu = new global.GameMenu(this._window);

        this._window.visible = true;

        bindWindowEvent(ObservableWindowEventType_Close, this._dispose);

        this._mode.loadScript("sc01.krs");
        this._mode.resumeCommandLoopAsync();
    }

    Finalize() {
        this._dispose();
    }

    Func(_dispose)() {
        System.removeContinuousHandler(this._onTick);
        gAsyncCaller.callOnce(this._disposeCallback);
    }

    Func(_disposeCallback)() {
        this._checkMemoryLeak();
        invalidate this._mode if this._mode isvalid;
        invalidate this._window if this._window isvalid;
        invalidate this._menu if this._menu isvalid;
        invalidate this._mode if this._mode isvalid;
    }

    Func(_checkMemoryLeak) {
        m4_ifelse(DEBUG, 1,
            invalidate global.gAsyncCaller;
            global.checkMemoryLeakForDebug();
        )
    }

    Func(_onTick)(tick:int) {
        this._currentTick = tick;
        this._mode.onTick(tick);
    }
}
