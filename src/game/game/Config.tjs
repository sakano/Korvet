// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

Class(Config)
{
    property currentMode {
        getter {
            return this._currentMode;
        }
        setter(value) {
            if (this._currentMode === value) return;
            changeMode(value);
        }
    }
    Func(createMode)(mode:string, parent:string = ConfigMode_Default) {
        checkArgs
        typeVoid(this._config[mode])
        typeCheck(this._config[parent], "Dictionary")
        if (this._config[mode] !== void) return;
        this._config[mode] = %[ __parent : this._config[parent] ];
    }

    Func(changeMode)(mode:string) {
        checkArgs
        typeCheck(this._config[mode], "Dictionary")
        if (this._currentMode === mode) return;
        var configFrom = this._config[this._currentMode];
        this._currentMode = mode;

        var configTo = this._getConfigHierarchy(mode);

        // 全ての項目をチェックして値が変わるもののみ適用
        FOR_EACH(valueType, this._config[ConfigMode_Default].getKeys()) {
            if (valueType === "__parent") { continue; }
            for (var configIndex = 0; configIndex < configTo.count; ++configIndex) {
                if (typeof configTo[configIndex][valueType] === "undefined") { continue; }
                var valueTo = configTo[configIndex][valueType];
                if (valueTo !== configFrom[valueType]) {
                    this._notifyUpdate(valueType, valueTo, mode);
                }
            }
        }
    }

    Func(newValue)(valueType:string, defaultValue:any+, setterCallback:Function) {
        checkArgs
        typeVoid(this._setterCallbacks[valueType])
        typeVoid(this._config[ConfigMode_Default][valueType])
        this._setterCallbacks[valueType] = setterCallback;
        setValue(valueType, defaultValue, ConfigMode_Default);
    }

    Func(setValue)(valueType:string, value:any+, mode:string = this._currentMode) {
        checkArgs
        this._config[mode][valueType] = value;
        this._notifyUpdate(valueType, value, mode);
    }

    Func(getValue)(valueType:string, mode:string = this._currentMode) {
        checkArgs
        var config = this._config[mode];
        while (typeof config[valueType] === "undefined") {
            typeString(config.__parent)
            config = this._config[config.__parent];
        }
        return config[valueType];
    }

    Func(serialize)() { notImplemented(); }
    Func(deserialize)(data:Dictionary) { notImplemented(); }



    var _currentMode = ConfigMode_Default;

    var _config = %[
        ConfigMode_Default => %[
            __parent : null
        ]
    ];

    var _setterCallbacks = %[];

    Constructor() {
        global.includeObservable(this);
    }

    Finalize() {
        global.finalizeObservable(this);
        this._config.dispose();
        invalidate this._config;
        invalidate this._setterCallbacks;
    }

    Func(_notifyUpdate)(valueType:string, value:any+, mode:string) {
        if (mode === this._currentMode) {
            this._setterCallbacks[valueType](value, valueType);
            this._triggerEvent(ConfigEventType_ValueUpdate, valueType, value);
        }
        this._triggerEvent(ConfigEventType_ValueUpdateAll, valueType, value, mode);
    }

    Func(_getConfigHierarchy)(mode:string) {
        checkArgs
        var configs = [];
        for (var config = this._config[mode]; config !== null; config = config.__parent) {
            configs.add(config);
        }
        assert(configs[configs.count - 1] === this._config[ConfigMode_Default])
        return configs;
    }
}
