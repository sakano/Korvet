// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

Class(KorvetConverter)
{
    Func(convert)(srcPath:string, destPath:string) {
        checkArgs
        assert(Storages.isExistentStorage(srcPath))
        this._initParser();
        this._initConverters();
        this._loadCommonFiles();

        var error = this._parser.initStorage(srcPath);
        if (!success(error)) {
            global.gLog.fatal(error.allMessage);
            return error;
        }

        var convertedScriptData = [];
        while (true) {
            var command = this._getNextCommand();
            if (command.isEmpty()) break;

            this._messageConverter.convert(command);
            this._stageConverter.convert(command);
            switch (command.name) {
            case "__endpage":
                var data = this._createSyncData();
                data.message = this._messageConverter.createSyncData();
                convertedScriptData.add(data);
                break;
            case "sync":
                convertedScriptData.add(this._createSyncData());
                break;
            }
        }
        convertedScriptData.saveStruct(destPath);
    }

    Func(convertMacroFile)(srcPath:string, destPath:string) {
        checkArgs
    }

    Func(setCommonFile)(files*) {
        checkArgs
        for (var i = 0; i < files.count; ++i) {
            assert(Storages.isExistentStorage(files[i]))
            assert(!this._commonFiles.contains(files[i]))
            this._commonFiles.add(files[i]);
        }
    }


    var _commonFiles = [];

    var _parser;
    var _macroParserModule;

    var _messageConverter;
    var _stageConverter;

    Constructor() {
    }

    Finalize() {
        invalidate this._commonFiles;

        invalidate this._parser if this._parser !== void;
        invalidate this._macroParserModule if this._macroParserModule !== void;
        
        invalidate this._messageConverter if this._messageConverter;
        invalidate this._stageConverter if this._stageConverter;
    }

    Func(_initParser)() {
        if (this._parser !== void) {
            invalidate this._parser;
        }
        this._parser = new global.KorvetParser();
        this._parser.setModule(new global.MacroParserModule(), PriorityQueue_Highest);
        this._parser.setModule(new global.PageBeginEndParserModule(), PriorityQueue_Normal);
    }

    Func(_initConverters)() {
        if (this._messageConverter !== void) {
            invalidate this._messageConverter;
            invalidate this._stageConverter;
        }
        this._messageConverter = new MessageCommandConverter();
        this._stageConverter = new StageCommandConverter();
    }

    Func(_loadCommonFiles)() {
        for (var i = 0; i < this._commonFiles.count; ++i) {
            assert(Storages.isExistentStorage(this._commonFiles[i]))
            this._parser.initStorage(this._commonFiles[i]);

            for (var command = this._getNextCommand(); command.name !== "__endfile"; command = this._getNextCommand()) {
                switch(command.name) {
                case "__beginfile":
                case "__endfile":
                case "__emptyline":
                case "__reline":
                    break;
                default:
                    global.gLog.fatal(@"unknown command(${command.name})");
                }
            }
        }
    }

    Func(_getNextCommand)() {
        // 次のコマンドを得る
        var command = %[];
        var error = this._parser.getNextCommand(command);
        
        // パース中にエラーが発生したら停止
        if (!success(error)) {
            global.gScriptLogger.onScriptError(ASSERT_SCRIPT_PARSER_ERROR, "MES", error.message);
            // TODO
            throw new Exception("script parse error happened");
        }
        return command;
    }

    Func(_createSyncData)() {
        return %[
            stage : this._stageConverter.createSyncData()
        ];
    }
}
