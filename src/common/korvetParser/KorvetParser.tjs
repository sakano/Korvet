// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

Class(KorvetParser)
{
    property currentStorage {
        getter {
            typeString(this._currentStorage)
            assert(this._currentStorage.length > 0)
            return this._currentStorage;
        }
    }

    property currentLineNumber {
        getter {
            typeInt(this._currentLineNumber)
            assert(this._currentLineNumber >= 0)
            return this._currentLineNumber;
        }
    }

    Func(initStorage)(path:string, utf8:bool = false) {
        checkArgs
        assert(path.length > 0)

        // ファイルが存在しなければ例外を投げる
        if (!Storages.isExistentStorage(path)) throw new global.FileNotFoundException(path);

        // 状態を初期化
        this.clear(false);

        // ファイルを読み込み
        this._lines.load(path);
        this._currentStorage = path;
        this._currentStorageEnded = false;

        // ラベルを読み込み
        for (var i = 0; i < this._lines.count; ++i) {
            var line = this._trimIndentation(this._lines[i]);
            if (line[0] !== "*") continue;
            var name = line.substr(1);
            this._labels[name] = i;
        }

        // moduleに通知
        this._foreachModules(LMD(module) { module.onInitStorage(this); } incontextof this);

        // ファイル開始コマンドを積んでおく
        var beginFileCommand = this._createBeginFileCommand(this._currentStorage);
        this.addHeadCommand(beginFileCommand);
    }

    Func(setModule)(module:KorvetParserModule, priority:int) {
        checkArgs
        // priorityに従ってmodule追加位置を探す
        var indexToInsert = this._modulesPriority.count - 1;
        for (; indexToInsert > 0; --indexToInsert) {
            if (this._modulesPriority[indexToInsert] > priority) break;
        }
        ++indexToInsert;
        // moduleを追加
        this._modules.insert(indexToInsert, module);
        this._modulesPriority.insert(indexToInsert, priority);
    }

    Func(addHeadCommand)(command:Dictionary) {
        checkArgs
        this._commandList.push(command);
    }

    Func(addTailCommand)() {
        this._commandList.unshift(command);
    }

    Func(cancelHeadCommand)() {
        this._commandList.pop();
    }

    Func(createCommand)(commandName:string, attributes*) {
        checkArgs
        assert(attributes.count % 2 === 0)
        var attrNames = [];
        var attrValues = %[];
        for (var i = 0; i < attributes.count; i += 2) {
            typeString(attributes[i])
            typeString(attributes[i+1])
            attrNames.add(attributes[i]);
            assert(typeof attrValues[attributes[i]] === "undefined")
            attrValues[attributes[i]]  = attributes[i+1];
        }
        return %[
            name : commandName,
            attributeNames : attrNames,
            attributeValues : attrValues
        ];
    }

    Func(getNextCommand)() {
        checkArgs
        assert(this._currentStorage !== "")

        while (true) {
            // コマンドリストが空なら次のタグを得てリストに入れる
            // 次のタグが得られなければ終わり
            if (this._commandList.count === 0) {
                var nextCommand = this._getNextCommand();
                if (nextCommand === null) return null;
                this.addHeadCommand(nextCommand);
            }   

            // コマンドリストから次のコマンドを得る
            var nextCommand = this._commandList[-1];

            // モジュールに通知
            var data = %[ mode: KorvetParserModuleMode_End ];
            this._foreachModules(LMD(module, data, nextCommand) {
                var result;
                try {
                    result = module.onCommand(this, nextCommand);
                } catch(e) {
                    throw new global.KorvetParserException(this._currentStorage, this._currentLineNumber,
                        this._currentLogicalLine, this._currentLogicalLineIndex, EXCEPTION_KORVET_PARSE, e);
                }
                if (result !== void && result.mode !== void) {
                    data.mode = result.mode;
                }
            } incontextof this, data, nextCommand);

            switch (data.mode) {
            case KorvetParserModuleMode_End:
                this._commandList.pop();
                return nextCommand;
            case KorvetParserModuleMode_Loop:
                break;
            case KorvetParserModuleMode_Cancel:
                this._commandList.pop();
                break;
            default:
                assert(false);
            }
        }
    }

    Func(goToLabel)(label:string) {
        checkArgs
        assert(this._currentStorage !== "")

        var lineNumber = this._labels[label];
        if (lineNumber === void) {
            throw new global.KorvetParserException(this._currentStorage, this._currentLineNumber,
                this._currentLogicalLine, this._currentLogicalLineIndex,
                expandMessage(EXCEPTION_KORVET_PARSER_LABEL_NOT_FOUND, "LABEL", label));
        }
        
        this._commandList.clear();
        this._currentStorageEnded = false;
        this._currentLineNumber = lineNumber;
        this._currentLogicalLine = "";
        this._currentLogicalLineIndex = 0;
        this._processingCurrentLine = false;
        this._foreachModules(LMD(module) { module.onInitStorage(this); } incontextof this);
    }

    Func(clear)(clearModules:bool = true) {
        this._lines.clear();
        this._labels.clear();
        this._commandList.clear();
        this._currentStorage = "";
        this._currentStorageEnded = true;
        this._currentLineNumber = 0;
        this._currentLogicalLine = "";
        this._currentLogicalLineIndex = 0;
        this._processingCurrentLine = false;
        if (clearModules) {
            this._foreachModules(LMD(module) { module.clear(); });
        }
    }



    var _lines = [];
    var _labels = %[];

    var _modules = [];
    var _modulesPriority = [];

    var _commandList = [];

    var _currentStorage;
    var _currentStorageEnded;

    var _currentLineNumber;
    var _currentLogicalLine;
    var _currentLogicalLineIndex;

    var _processingCurrentLine;



    Constructor() {
        this.clear();
    }

    Finalize() {
        invalidate this._lines;
        invalidate this._labels;
        this._modules.dispose();
        invalidate this._modules;
        invalidate this._modulesPriority;
        invalidate this._commandList;
    }

    Func(_foreachModules)(handler:Function, *) {
        for (var i = this._modules.count - 1; i >= 0; --i) {
            handler(this._modules[i], *);
        }
    }

    Func(_getNextCommand)() {
        checkArgs
        // 既に最後まで処理済みなら何もしない
        if (this._currentStorageEnded) return null;

        while (true) try { // 次のコマンドが見つかるまで繰り返す
            if (!this._processingCurrentLine) {
                // 現在の行を処理中でなければ次の行に進む
                var currentLine = this._goNextLine();

                // 次の行が得られていなければファイル終了
                if (currentLine === void) {
                    this._currentStorageEnded = true;
                    return this._createEndFileCommand(this._currentStorage);
                }

                // インデント文字を消去
                this._currentLogicalLine = this._trimIndentation(currentLine);
                this._currentLogicalLineIndex = 0;

                // 空行ならemptyLineCommandを返す
                if (this._currentLogicalLine.length === 0) {
                    return this._createEmptyLineCommand();
                }

                // コメントなら何もせずやり直し
                if (this._currentLogicalLine[0] === ";") continue;

                // ラベルならラベルコマンド
                if (this._currentLogicalLine[0] === "*") {
                    var name = this._currentLogicalLine.substr(1);
                    if (this._labels[name] !== void) {
                        global.gScriptLogger.onScriptError(ASSERT_SCRIPT_LABEL_DUPLICATE, "LABEL", name);
                    }
                    this._labels[name] = this._currentLineNumber;
                    return this._createLabelCommand(name);
                }

                // 末尾が\なら次の行と連結する
                while (this._currentLogicalLine[this._currentLogicalLine.length - 1] === "\\") {
                    this._currentLogicalLine = this._currentLogicalLine.substr(0, this._currentLogicalLine.length - 1);
                    var nextLine = this._goNextLine();
                    this._currentLogicalLine += this._trimIndentation(nextLine);
                }

                // コマンド行なら全体をコマンドとして処理
                if (this._currentLogicalLine[0] === "@") {
                    return this._createCommand(this._currentLogicalLine.substr(1));
                }
            }

            // 現在の行は全て処理済みなら改行
            if (this._currentLogicalLineIndex >= this._currentLogicalLine.length) {
                this._processingCurrentLine = false;
                return this._createRelineCommand();
            }

            // 1文字ずつ走査する
            this._processingCurrentLine = true;
            var current = this._currentLogicalLine[this._currentLogicalLineIndex];

            // コマンドの処理
            if (current === '[') {
                if (this._currentLogicalLine[this._currentLogicalLineIndex + 1] === '[') {
                    // 2つ続いていたら文字として処理
                    this._currentLogicalLineIndex += 2;
                    return this._createCharacterCommand('[');
                }

                // []で囲まれた部分をコマンドとして処理
                var beginIndex = this._currentLogicalLineIndex + 1;
                var endIndex = this._currentLogicalLine.indexOf(']', beginIndex);
                if (endIndex < 0) {
                    throw new global.KorvetException(EXCEPTION_KORVET_PARSER_COMMAND_END_NOT_FOUND);
                }
                var command = this._createCommand(this._currentLogicalLine.substr(beginIndex, endIndex - beginIndex));
                this._currentLogicalLineIndex += endIndex - beginIndex + 2;
                return command;
            }

            // 文字として処理
            this._currentLogicalLineIndex += 1;
            return this._createCharacterCommand(current);
        } catch (e) {
            throw new global.KorvetParserException(this._currentStorage, this._currentLineNumber,
                this._currentLogicalLine, this._currentLogicalLineIndex, EXCEPTION_KORVET_PARSE, e);
        }
        assert(false) // ここには来ない
    }

    Func(_createCommand)(commandString:string) {
        checkArgs
        var commandLineRegExp = /\A([^ \t\[\]=]+)([ \t]+(([^ \t\[\]=]+)([ \t]*=[ \t]*("(.+?)"|'(.+?)'|([^ \t\[\]=]+)))?)?)*\z/;

        // 構文が正しいかチェック
        if (!commandLineRegExp.test(commandString)) {
            throw new global.KorvetException(EXCEPTION_KORVET_PARSER_COMMAND_SYNTAX);
        }

        // コマンド名を取得
        var command = this.createCommand(commandLineRegExp.matches[1]);

        // 属性と属性値を取得
        var keyValueRegExp = /[ \t]+(([^ \t\[\]=]+)([ \t]*=[ \t]*("(.+?)"|'(.+?)'|([^ \t\[\]=]+)))?)?/g;
        while (keyValueRegExp.test(commandString)) {
            var attrName = keyValueRegExp.matches[2].toLowerCase();
            var value = null;
            if (keyValueRegExp.matches[5] != "") value = keyValueRegExp.matches[5];
            else if (keyValueRegExp.matches[6] != "") value = keyValueRegExp.matches[6];
            else if (keyValueRegExp.matches[7] != "") value = keyValueRegExp.matches[7];
            if (command.attributeValues[attrName] !== void) {
                global.gScriptLogger.notifyAttributeDuplicatedError(attrName);
                command.attributeNames.remove(attrName);
            }
            command.attributeNames.add(attrName);
            command.attributeValues[attrName] = value;
        }

        // 生成されたコマンドが正しい形式かチェック
        typeCheck(command, "Dictionary")
        assert(command.getKeys().count === 3)
        typeString(command.name)
        assert(command.name.length > 0)
        typeCheck(command.attributeNames, "Array")
        typeCheck(command.attributeValues, "Dictionary")
        assert(command.attributeNames.count === command.attributeValues.getKeys().count)
        return command;
    }

    Func(_createEmptyLineCommand)() {
        checkArgs
        return this.createCommand("__emptyline");
    }

    Func(_createCharacterCommand)(character:string) {
        checkArgs
        return this.createCommand("__ch", "text", character);
    }

    Func(_createRelineCommand)() {
        checkArgs
        return this.createCommand("__reline");
    }

    Func(_createBeginFileCommand)(filename:string) {
        checkArgs
        return this.createCommand("__beginfile", "file", filename);
    }

    Func(_createEndFileCommand)(filename:string) {
        checkArgs
        return this.createCommand("__endfile", "file", filename);
    }

    Func(_createLabelCommand)(name:string) {
        checkArgs
        return this.createCommand("__label", "name", name);
    }

    Func(_goNextLine)() {
        return this._lines[this._currentLineNumber++];
    }

    // 先頭と末尾からタブと半角スペースを削除して返す
    Func(_trimIndentation)(str:string) {
        checkArgs
        return str.replace(/^[ \t]+/, "").replace(/^[ \t]+/, "");
    }

    Func(_trim)(line:string) {
        return line.replace(/^\t+/, "");
    }
}
