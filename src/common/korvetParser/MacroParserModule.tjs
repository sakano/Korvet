// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

ClassExtends(MacroParserModule, KorvetParserModule)
{
    property macroParameter {
        getter { return _macroParameters[-1]; }
    }

    OverrideFunc(clear)() {
        this._registeredMacros.dispose();
        this._registeredAttributeMacros.dispose();
        this._clearInternalState();
    }

    OverrideFunc(onInitStorage)(parser:KorvetParser) {
        checkArgs
        this._clearInternalState();
    }

    OverrideFunc(onCommand)(parser:KorvetParser, command:Dictionary) {
        checkArgs
        // マクロ記録中ならコマンドを記録してキャンセル
        if (this._isMacroRecording && command.name !== "macro" && command.name !== "endmacro") {
            this._recordMacro(command);
            return %[ mode : KorvetParserModuleMode_Cancel ];
        }

        // マクロを展開
        var error = this._extractAttributeMacro(command);
        if (error !== void) return %[ error : error ];
        if (this._extractMacro(command, parser)) {
            return %[ mode : KorvetParserModuleMode_Loop ];
        }

        // マクロ用のタグならそれぞれ処理
        switch(command.name) {
        case "macro":       return this._beginRecordMacro(command, parser);
        case "endmacro":    return this._endRecordMacro(command);
        case "__popmacro":  return this._popMacro();
        case "amacro":      return this._registerAttributeMacro(command);
        default:            return;
        }
    }

    Func(clone)() {
        var obj = new global.MacroParserModule();
        obj._registeredMacros.assignStruct(this._registeredMacros);
        obj._registeredAttributeMacros.assignStruct(this._registeredAttributeMacros);
        return obj;
    }



    var _registeredMacros = %[];
    var _registeredAttributeMacros = %[];

    var _isMacroRecording = false;
    var _recordingMacroName;
    var _recordingMacroCommands = [];
    var _recordingMacroDefaultAttributeValues = %[];
    var _recordingMacroDefaultAttributeNames = [];

    var _macroParameters = [];
    var _macroAttributeMacros = [];

    Constructor() {
        super.KorvetParserModule();
    }

    Finalize() {
        super.finalize();
        this._registeredMacros.dispose();
        invalidate this._registeredMacros;
        this._registeredAttributeMacros.dispose();
        invalidate this._registeredAttributeMacros;

        this._recordingMacroCommands.dispose();
        invalidate this._recordingMacroCommands;
        this._recordingMacroDefaultAttributeValues.dispose();
        invalidate this._recordingMacroDefaultAttributeValues;
        this._recordingMacroDefaultAttributeNames.dispose();
        invalidate this._recordingMacroDefaultAttributeNames;

        this._macroParameters.dispose();
        invalidate this._macroParameters;
    }

    Func(_clearInternalState)() {
        this._clearRecordMacroState();

        this._macroParameters.dispose();
        this._macroAttributeMacros.dispose();
    }

    Func(_onDeserialized)() {
        this._clearInternalState();
    }

    Func(_extractMacro)(command:Dictionary, parser:KorvetParser) {
        checkArgs
        var macro = this._registeredMacros[command.name];
        // マクロとして登録されていなければfalseを返す
        if (macro === void) return false;

        // コマンドを追加する前に現在のコマンドをキャンセル
        parser.cancelHeadCommand();

        // マクロ終了箇所に__popmacroコマンドを追加
        parser.addHeadCommand(this._createPopMacroCommand(parser));

        // 記録されているコマンドを全て次のコマンドとして追加
        var commands = macro.commands.clone();
        for (var cmdIndex = commands.count-1; cmdIndex >= 0; --cmdIndex) {
            parser.addHeadCommand(commands[cmdIndex]);
        }

        // マクロ内パラメータを生成
        var macroParam = command.attributeValues.cloneShallow();
        var macroParamNames = command.attributeNames.cloneShallow();
        var attrNames = command.attributeNames;
        var defAttrNames = macro.defaultAttributeNames;
        var defAttrValues = macro.defaultAttributeValues;
        for (var i = 0; i < defAttrNames.count; ++i) {
            var defAttrName = defAttrNames[i];
            if (attrNames[defAttrName] !== void) continue;
            macroParam[defAttrName] = defAttrValues[defAttrName];
            macroParamNames.add(defAttrName);
        }
        this._macroParameters.push(macroParam);

        // マクロ内の"*"属性はマクロ内パラメータに展開されるように属性マクロを登録しておく
        var attrMacro = this._createAttributeMacro(macroParamNames, macroParam);
        this._macroAttributeMacros.push(attrMacro);
        this._registeredAttributeMacros["*"] = attrMacro;

        // マクロとして処理したらtrueを返す
        return true;
    }

    Func(_createPopMacroCommand)(parser:KorvetParser) {
        checkArgs
        var command = %[];
        parser.makeCommandTemplate(command, "__popmacro");
        return command;
    }

    Func(_popMacro)() {
        invalidate this._macroParameters.pop();
        invalidate this._macroAttributeMacros.pop();
        assert(this._macroParameters.count === this._macroAttributeMacros.count);
        if (this._macroAttributeMacros.count > 0) {
            this._registeredAttributeMacros["*"] = this._macroAttributeMacros[-1];
        } else {
            delete this._registeredAttributeMacros["*"];
        }
    }

    Func(_extractAttributeMacro)(command:Dictionary) {
        checkArgs
        // 属性が無ければ何もしない
        if (command.attributeNames.count === 0) return;

        // 属性を１つずつ展開できるかチェックしていく
        var attrNames = command.attributeNames;
        var attrValues = command.attributeValues;
        for (var nameIndex = 0; nameIndex < attrNames.count; ++nameIndex) {
            var attrName = attrNames[nameIndex];
            // 登録されていない属性名なら何もしない
            var attrMacro = this._registeredAttributeMacros[attrName];
            if (attrMacro === void) continue;

            // 属性値を保持し、対象の属性を消去
            var attrValue = attrValues[attrName];
            attrNames.erase(nameIndex);
            delete attrValues[attrName];

            // 登録されている内容を挿入
            for(var macroIndex = attrMacro.count-1; macroIndex >= 0; --macroIndex) {
                var insertAttrName = attrMacro[macroIndex].name;
                var insertAttrValue = attrMacro[macroIndex].value;
                var index = attrNames.find(insertAttrName);
                if (index < 0) {
                    // 同じ属性は指定されていない
                    // 属性を挿入する
                    this._insertAttribute(nameIndex, insertAttrName, insertAttrValue, attrValue, attrNames, attrValues);
                } else if (index < nameIndex) {
                    // 属性マクロより前に、属性マクロに含まれる属性名と同じ属性が指定されている
                    global.gScriptLogger.notifyAttributeDuplicatedError(insertAttrName);
                    // 同じ属性を削除してから属性を挿入
                    attrNames.erase(index);
                    delete attrValues[insertAttrName];
                    --nameIndex;
                    this._insertAttribute(nameIndex, insertAttrName, insertAttrValue, attrValue, attrNames, attrValues);
                } else {
                    // 属性マクロより後に、属性マクロに含まれる属性名と同じ属性が指定されている
                    // 後の指定を優先するので何もしない
                    doNothing();
                }
            }

            // 展開した内容も再度チェックされるように１つ戻る
            --nameIndex;
        }
    }

    Func(_insertAttribute)(index:int, insertAttrName:string, insertAttrValue:string?, orgAttrValue:string?, attrNames:Array, attrValues:Dictionary) {
        checkArgs
        attrNames.insert(index, insertAttrName);
        // 属性値が "*" のときは元の属性値に置き換える
        attrValues[insertAttrName] = insertAttrValue !== "*" ? insertAttrValue : orgAttrValue;
    }

    Func(_beginRecordMacro)(command:Dictionary, parser:KorvetParser) {
        checkArgs
        // 既にマクロ記録中ならエラー
        if (this._isMacroRecording) {
            return %[ error : new global.Error(ASSERT_SCRIPT_NESTED_MACRO) ];
        }

        // マクロの記録を開始
        this._isMacroRecording = true;

        // マクロ名を記録
        this._recordingMacroName = this._validateMacroName(command.attributeValues);

        // デフォルト属性を記録
        this._recordingMacroDefaultAttributeValues.assign(command.attributeValues);
        this._recordingMacroDefaultAttributeNames.assign(command.attributeNames);

        // デフォルト属性から_name属性を消去
        delete this._recordingMacroDefaultAttributeValues._name;
        this._recordingMacroDefaultAttributeNames.remove("_name");

        // 処理済みなのでコマンドをキャンセル
        return %[ mode : KorvetParserModuleMode_Cancel ];
    }

    Func(_recordMacro)(command:Dictionary) {
        checkArgs
        assert(this._isMacroRecording)
        // コマンドを記録
        var clonedCommand = command.cloneShallow();
        this._recordingMacroCommands.add(clonedCommand);
    }

    Func(_endRecordMacro)() {
        checkArgs
        // マクロ記録中でなければエラー
        if (!this._isMacroRecording) {
            global.gScriptLogger.onScriptError(ASSERT_SCRIPT_SINGLE_ENDMACRO);
            return %[ mode : KorvetParserModuleMode_Cancel ];
        }
        typeString(this._recordingMacroName)

        // 記録されている内容を_registeredMacrosに登録
        this._registeredMacros[this._recordingMacroName] = %[
            commands : this._recordingMacroCommands,
            defaultAttributeValues: this._recordingMacroDefaultAttributeValues,
            defaultAttributeNames : this._recordingMacroDefaultAttributeNames
        ];

        // マクロの記録を終了
        this._clearRecordMacroState();

        // 処理済みなのでコマンドをキャンセル
        return %[ mode : KorvetParserModuleMode_Cancel ];
    }

    Func(_clearRecordMacroState)() {
        this._isMacroRecording = false;
        this._recordingMacroName = void;
        this._recordingMacroCommands = [];
        this._recordingMacroDefaultAttributeValues = %[];
        this._recordingMacroDefaultAttributeNames = [];
    }

    Func(_registerAttributeMacro)(command:Dictionary) {
        checkArgs
        // マクロ名を取得
        var attrMacroName = this._validateMacroName(command.attributeValues);

        // 属性マクロを登録
        this._registeredAttributeMacros[attrMacroName] = this._createAttributeMacro(command.attributeNames, command.attributeValues);

        // 処理済みなのでコマンドをキャンセル
        return %[ mode : KorvetParserModuleMode_Cancel ];
    }

    Func(_createAttributeMacro)(attrNames:Array, attrValues:Dictionary) {
        var attrMacro = [];
        for (var i = 0; i < attrNames.count; ++i) {
            if (attrNames[i] === "_name") continue;
            attrMacro.add(%[
                name : attrNames[i],
                value : attrValues[attrNames[i]]
            ]);
        }
        return attrMacro;
    }

    Func(_validateMacroName)(attrValues:Dictionary, attrName:string = "_name") {
        var attrValue = global.gScriptLogger.validateAttribute("__error_macro_name", attrName, attrValues, AttributeType_Required, AttributeValueType_String);
        if (attrValue === "*") {
            global.gScriptLogger.notifyIllegalAttributeValueError(attrValue, attrName);
            attrValue = "__error_macro_name";
        }
        return attrValue;
    }
}
