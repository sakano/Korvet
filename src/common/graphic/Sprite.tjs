// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

Class(Sprite)
{
    m4_define(&--IMAGE_PROPERTY--&,
        property $1 {
            setter(value) {
                typeNumber(value)
                this._image.$1 = value;
            }
            getter { return this._image.$1; }
        })
    IMAGE_PROPERTY(x)
    IMAGE_PROPERTY(y)
    IMAGE_PROPERTY(originX)
    IMAGE_PROPERTY(originY)
    IMAGE_PROPERTY(scaleX)
    IMAGE_PROPERTY(scaleY)
    IMAGE_PROPERTY(shearX)
    IMAGE_PROPERTY(shearY)
    IMAGE_PROPERTY(angle)

    property alignment {
        setter(value) {
            assert(value === SpriteAlignment_BottomLeft
                || value === SpriteAlignment_BottomCenter
                || value === SpriteAlignment_BottomRight
                || value === SpriteAlignment_MiddleLeft
                || value === SpriteAlignment_MiddleCenter
                || value === SpriteAlignment_MiddleRight
                || value === SpriteAlignment_TopLeft
                || value === SpriteAlignment_TopCenter
                || value === SpriteAlignment_TopRight)
            this._alignment = value;
            this._recalcOffset = true;
        }
        getter { return this._alignment; }
    }

    property width  { getter { return this._image.width; } }
    property height { getter { return this._image.height; } }
    property redraw { getter { return this._image.redraw; } }
    property filename { getter { return this._image.filename; } }

    property visible {
        setter(value) {
            typeBool(value)
            this._targetLayer.visible = value;
        }
        getter {
            return this._targetLayer.visible;
        }
    }

    property offsetX {
        setter(value) {
            typeNumber(value)
            this._offsetX = value;
            this._recalcOffset = true;
        }
        getter { return this._offsetX; }
    }

    property offsetY {
        setter(value) {
            typeNumber(value)
            this._offsetY = value;
            this._recalcOffset = true;
        }
        getter { return this._offsetY; }
    }

    Func(setParentMatrix)(matrix:HierarchicalMatrix) {
        checkArgs
        this._offsetMatrix.setParentMatrix(...);
    }

    Func(load)(filename:string) {
        checkArgs
        this._image.load(filename);
        this._recalcOffset = true;
    }

    Func(draw)(force:bool = false) {
        checkArgs
        this._targetLayer.fill(0);
        if (this._recalcOffset) {
            this._resetOffset();
        }
        this._image.draw(this._targetLayer, force);
    }

    Func(clear)() {
        this._offsetMatrix.resetMatrix();

        this._offsetX = 0;
        this._offsetY = 0;
        this._recalcOffset = true;
        this._alignment = SpriteAlignment_MiddleCenter;

        this._targetLayer.fill(0);
        this._targetLayer.visible = false;

        this._image.clearBitmap();
    }



    var _targetLayer;
    var _invalidateTargetLayer;

    var _image;
    var _offsetMatrix;
    var _offsetX = 0;
    var _offsetY = 0;
    var _recalcOffset = false;
    var _alignment = SpriteAlignment_MiddleCenter;

    Constructor(targetLayer:Layer, invalidateTargetLayer:bool = false) {
        checkArgs
        this._targetLayer = targetLayer;
        this._invalidateTargetLayer = invalidateTargetLayer;

        this._offsetMatrix = new global.HierarchicalMatrix();
        this._image = this._createImage();
        this._image.setParentMatrix(this._offsetMatrix);
    }

    Finalize() {
        invalidate this._image;
        invalidate this._targetLayer if this._invalidateTargetLayer;
        invalidate this._offsetMatrix;
    }

    Func(_createImage)() {
        return new global.Image();
    }

    Func(_resetOffset)() {
        if (this.filename === "") return;
        switch (this._alignment) {
        case SpriteAlignment_BottomLeft:
            this._offsetMatrix.x = 0;
            this._offsetMatrix.y = this._targetLayer.height - this._image.height;
            break;
        case SpriteAlignment_BottomCenter:
            this._offsetMatrix.x = (this._targetLayer.width - this._image.width) / 2;
            this._offsetMatrix.y = this._targetLayer.height - this._image.height;
            break;
        case SpriteAlignment_BottomRight:
            this._offsetMatrix.x = this._targetLayer.width - this._image.width;
            this._offsetMatrix.y = this._targetLayer.height - this._image.height;
            break;
        case SpriteAlignment_MiddleLeft:
            this._offsetMatrix.x = 0;
            this._offsetMatrix.y = (this._targetLayer.height - this._image.height) / 2;
            break;
        case SpriteAlignment_MiddleCenter:
            this._offsetMatrix.x = (this._targetLayer.width - this._image.width) / 2;
            this._offsetMatrix.y = (this._targetLayer.height - this._image.height) / 2;
            break;
        case SpriteAlignment_MiddleRight:
            this._offsetMatrix.x = this._targetLayer.width - this._image.width;
            this._offsetMatrix.y = (this._targetLayer.height - this._image.height) / 2;
            break;
        case SpriteAlignment_TopLeft:
            this._offsetMatrix.x = 0;
            this._offsetMatrix.y = 0;
            break;
        case SpriteAlignment_TopCenter:
            this._offsetMatrix.x = (this._targetLayer.width - this._image.width) / 2;
            this._offsetMatrix.y = 0;
            break;
        case SpriteAlignment_TopRight:
            this._offsetMatrix.x = this._targetLayer.width - this._image.width;
            this._offsetMatrix.y = 0;
            break;
        }
        this._offsetMatrix.x += this._offsetX;
        this._offsetMatrix.y += this._offsetY;
        this._image.originX = this._image.width / 2 + this._offsetMatrix.x;
        this._image.originY = this._image.height / 2 + this._offsetMatrix.y;
        this._recalcOffset = false;
    }
}
