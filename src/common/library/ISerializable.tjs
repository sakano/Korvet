// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

Class(ISerializable)
{
    /**
     * Serializes the object into the dictionary.
     * @return dictionary The dictionary object.
     */
    Func(serializeIntoDictionary)() {
        var result = %[];
        for (var i = 0; i < properties.count; ++i) {
            assert(properties[i] != void)
            var value = object[properties[i]];
            if (typeof value === "Object") {
                result[properties[i]] = value.serialize();
            } else {
                result[properties[i]] = value;
            }
        }
        return result;
    }

    /**
     * Deserializes the object from the dictionary.
     * @param dictionary dic The dictionary object generated by serializeIntoDictionary().
     */
    Func(deserializeFromDictionary)(dic:Dictionary) {
        checkArgs
        for (var i = 0; i < properties.count; ++i) {
            var value = dic[properties[i]];
            if (typeof value === "Object") {
                object[properties[i]].deserialize(value);
            } else {
                object[properties[i]] = value;
            }
        }
        if (typeof object._onDeserialized !== "undefined") {
            object._onDeserialized();
        }
    }
}

/**
 * Adds serialize/deserialize functions to the object.
 * @param object object The object to add functions.
 * @param array properties The array of properties names to serialize.
 */
Func(includeSerializable)(object:object, properties:Array) {
    checkArgs
    assert(object isvalid)
    assert(typeof object.serialize === "undefined")
    assert(typeof object.deserialize === "undefined")
    var context = %[
        object : object,
        properties : properties
    ];
    object.serialize = ISerializable.serializeIntoDictionary incontextof context;
    object.deserialize = ISerializable.deserializeFromDictionary incontextof context;    
}

Func(extendsSerializable)(object:object, properties:Array) {
    checkArgs
    typeFunction(object.serialize)
    typeFunction(object.deserialize)
    var context = Scripts.getObjectContext(object.serialize);
    context.properties.push(properties*);
}

Func(finalizeSerializable)(object:object) {
    var context = Scripts.getObjectContext(object.serialize);
    invalidate context.properties;
    //invalidate context;
}
