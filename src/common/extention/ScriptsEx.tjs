// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

setStaticMember(Scripts, "readIniFile", LMD(path:string, sectionType) {
    checkArgs
    assert(sectionType === IniFileType_SectionRequired || sectionType === IniFileType_SectionOptional)
    if (!Storages.isExistentStorage(path)) {
        throw new FileNotFoundException(path);
    }

    var result = %[];
    var lines = [];
    lines.load(path);

    var current = (sectionType === IniFileType_SectionRequired) ? void : result;
    for (var lineNum = 0; lineNum < lines.count; ++lineNum) {
        var line = lines[lineNum].trim();
        switch(line[0]) {
        case ";": // comment line
            break;
        case "[": // section
            if (line[line.length-1] !== "]") {
                throw new ParseException(path, lineNum+1, line, EXCEPTION_READ_INI_FILE_SECTION);
            }
            var section = line.substr(1, line.length-2).trim();
            if (result[section] === void) { result[section] = %[]; }
            current = result[section];
            break;
        default:
            var idx = line.indexOf("=");
            if (idx > 0) { // keys
                var name = line.substr(0,idx).trim();
                var value = line.substr(idx+1).trim();
                if (current === void) {
                    throw new ParseException(path, lineNum+1, line, EXCEPTION_READ_INI_FILE_SECTION_UNSPECIFIED);
                }
                if (current[name] !== void) {
                    throw new ParseException(path, lineNum+1, line, expandMessage(EXCEPTION_READ_INI_FILE_KEY_NAME_DUPLICATE, "NAME", name));
                }
                current[name] = value;
            }
            break;
        }
    }
    return result;
});

setStaticMember(Scripts, "writeIniFile", LMD(path:string, dic:Dictionary) {
    checkArgs
    var lines = [];
    var innerDics = [];
    FOR_EACH(pair, dic) {
        var key = pair.key;
        var value = pair.value;
        if (value instanceof "Dictionary") {
            innerDics.push(key, value);
        } else {
            lines.push(key + "=" + value); // These keys are not included in sections.
        }
    }
    for (var i = 0; i < innerDics.count; i += 2) {
        lines.push("[" + innerDics[i] + "]");
        FOR_EACH(pair, innerDics[i+1]) {
            lines.push(pair.key + "=" + pair.value);
        }
    }
    lines.save(path);
});
