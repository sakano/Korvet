// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

{
    var multimap = new MultiMap();
    assertAlways(multimap.put("key", "data") === 0)
    assertAlways(multimap.put("key", "data2") === 1)
    assertAlways(multimap.put("key2", "data3") === 0)
    assertAlways(multimap.put("key2", "data4") === 1)

    var clonedMultimap = multimap.clone();
    assertAlways(clonedMultimap instanceof "MultiMap")
    assertAlways(clonedMultimap.equals(multimap))

    var data = multimap.get("key");
    assertAlways(data.count === 2)
    assertAlways(data[0] === "data")
    assertAlways(data[1] === "data2")
    var data = multimap.get("key2");
    assertAlways(data.count === 2)
    assertAlways(data[0] === "data3")
    assertAlways(data[1] === "data4")

    var data = multimap.getKeys();
    assertAlways(data.count === 2)
    data.remove("key");
    assertAlways(data.count === 1)
    data.remove("key2");
    assertAlways(data.count === 0)

    var data = multimap.values();
    assertAlways(data.count === 4)
    data.remove("data");
    assertAlways(data.count === 3)
    data.remove("data2");
    assertAlways(data.count === 2)
    data.remove("data3");
    assertAlways(data.count === 1)
    data.remove("data4");
    assertAlways(data.count === 0)

    assertAlways(multimap.contains("key", "data") === true)
    assertAlways(multimap.contains("key2", "data") === false)

    assertAlways(multimap.containsKey("key") === true)
    assertAlways(multimap.containsKey("key3") === false)

    assertAlways(multimap.containsValue("data") === true)
    assertAlways(multimap.containsValue("data5") === false)

    assertAlways(multimap.removeValue("data4") === 1)
    assertAlways(multimap.removeValue("data5") === 0)

    assertAlways(multimap.isEmpty() === false)

    var data = multimap.get("key2");
    assertAlways(data.count === 1)
    assertAlways(data[0]  === "data3")

    assertAlways(multimap.removeKey("key") === 2)
    assertAlways(multimap.removeKey("key4") === 0)

    var data = multimap.get("key");
    assertAlways(data.count === 0)

    assertAlways(multimap.remove("key3", "data") === false)
    assertAlways(multimap.remove("key2", "data3") === true)

    var data = multimap.get("key2");
    assertAlways(data.count === 0)

    assertAlways(multimap.isEmpty() === true)


    assertAlways(clonedMultimap.getKeys().count === 2)
    assertAlways(clonedMultimap.values().count === 4)

    var context = %[ keys:[], values:[], count:0 ];
    clonedMultimap.foreach(LMD(key, values) {
        ++count;
        keys.add(key);
        this.values.push(values*);
    } incontextof context);
    assertAlways(context.count === 2)
    assertAlways(context.keys.count === 2)
    context.keys.remove("key");
    assertAlways(context.keys.count === 1)
    context.keys.remove("key2");
    assertAlways(context.keys.count === 0)
    assertAlways(context.values.count === 4)
    context.values.remove("data");
    assertAlways(context.values.count === 3)
    context.values.remove("data2");
    assertAlways(context.values.count === 2)
    context.values.remove("data3");
    assertAlways(context.values.count === 1)
    context.values.remove("data4");
    assertAlways(context.values.count === 0)
    clonedMultimap.clear();
    assertAlways(clonedMultimap.getKeys().count === 0)
    assertAlways(clonedMultimap.values().count === 0)

    invalidate multimap;
    invalidate clonedMultimap;
    invalidate context;
}

{
    var multimap = new MultiMap();
    var checkEmpty = LMD(multimap) {
        assertAlways(multimap.get("key").count === 0)
        assertAlways(multimap.remove("key", "value") === false)
        assertAlways(multimap.removeKey("key") === 0)
        assertAlways(multimap.removeValue("key") === 0)
        assertAlways(multimap.contains("key", "value") === false)
        assertAlways(multimap.containsKey("key") === false)
        assertAlways(multimap.containsValue("key") === false)
        assertAlways(multimap.getKeys().count === 0)
        assertAlways(multimap.values().count === 0)
        assertAlways(multimap.isEmpty() === true)
        multimap.foreach(LMD(key, values) { assertAlways(false) });
    };
    checkEmpty(multimap);
    var cloned = multimap.clone();
    checkEmpty(cloned);
    invalidate cloned;

    assertAlways(multimap.put("key", "value") === 0)
    assertAlways(multimap.put("key", "value") === 1)
    assertAlways(multimap.put("key", "value2") === 2)
    assertAlways(multimap.put("key2", "key2Value") === 0)
    assertAlways(multimap.put("key2", "key2Value2") === 1)
    assertAlways(multimap.put("key3", "key3Value") === 0)
    var check = LMD(multimap) {
        assertAlways(multimap.values().count === 6)
        assertAlways(multimap.getKeys().count === 3)
        assertAlways(multimap.containsKey("key") === true)
        assertAlways(multimap.containsKey("key3") === true)
        assertAlways(multimap.containsKey("key5") === false)
        assertAlways(multimap.containsKey("key2") === true)
        assertAlways(multimap.containsKey("key4") === false)
        assertAlways(multimap.containsValue("value") === true)
        assertAlways(multimap.containsValue("key2Value2") === true)
        assertAlways(multimap.containsValue("key3Value") === true)
        assertAlways(multimap.containsValue("key2Value") === true)
        assertAlways(multimap.containsValue("key3Value2") === false)
        assertAlways(multimap.containsValue("value2") === true)
        assertAlways(multimap.contains("key", "value2") === true)
        assertAlways(multimap.contains("key3", "key3Value") === true)
        assertAlways(multimap.contains("key2", "key2Value2") === true)
        assertAlways(multimap.contains("key3", "key2Value") === false)
        assertAlways(multimap.contains("key3", "value") === false)
        assertAlways(multimap.contains("key", "value3") === false)
        assertAlways(multimap.contains("key2", "key2Value") === true)
        assertAlways(multimap.contains("key", "value") === true)
        assertAlways(multimap.contains("value", "key") === false)
        assertAlways(multimap.isEmpty() === false)
    };
    check(multimap);
    var cloned = multimap.clone();
    check(cloned);
    invalidate cloned;

    assertAlways(multimap.remove("key", "key2Value") === false)
    check(multimap);

    assertAlways(multimap.remove("notExistKey", "value") === false)
    check(multimap);

    assertAlways(multimap.removeKey("notExistKey") === 0)
    check(multimap);

    assertAlways(multimap.removeValue("notExistValue") === 0)
    check(multimap);

    assertAlways(multimap.get("notExistKey").count === 0)
    check(multimap);

    multimap.get("key").clear();
    check(multimap);

    multimap.get("key3").push("value", "value2");
    check(multimap);

    multimap.getKeys().clear();
    check(multimap);

    multimap.values().clear();
    check(multimap);

    var cloned = multimap.clone();
    cloned.clear();
    check(multimap);
    invalidate cloned;

    var cloned = multimap.clone();
    cloned.removeKey("key");
    check(multimap);
    invalidate cloned;

    var context = %[ count: 0 ];
    multimap.foreach(LMD(key, values) { ++count; values.clear(); } incontextof context);
    assertAlways(context.count === 3)
    check(multimap);

    context.count = 0;
    multimap.foreach(LMD() { ++count; return 0; } incontextof context);
    assertAlways(context.count === 1)
    check(multimap);

    assertAlways(multimap.remove("key2", "key2Value") === true)
    assertAlways(multimap.getKeys().count === 3)
    assertAlways(multimap.values().count === 5)
    assertAlways(multimap.containsValue("key2Value") === false)
    assertAlways(multimap.contains("key2", "key2Value") === false)
    assertAlways(multimap.contains("key2", "key2Value2") === true)
    assertAlways(multimap.containsKey("key2") === true)
    assertAlways(multimap.isEmpty() === false)

    assertAlways(multimap.remove("key2", "key2Value2") === true)
    assertAlways(multimap.getKeys().count === 2)
    assertAlways(multimap.values().count === 4)
    assertAlways(multimap.containsValue("key2Value") === false)
    assertAlways(multimap.contains("key2", "key2Value2") === false)
    assertAlways(multimap.containsKey("key2") === false)
    assertAlways(multimap.isEmpty() === false)

    assertAlways(multimap.put("key2", "key2Value") === 0)
    assertAlways(multimap.put("key2", "key2Value2") === 1)
    assertAlways(multimap.getKeys().count === 3)
    assertAlways(multimap.values().count === 6)
    assertAlways(multimap.containsKey("key2") === true)
    assertAlways(multimap.isEmpty() === false)

    assertAlways(multimap.removeKey("key2") === 2)
    assertAlways(multimap.getKeys().count === 2)
    assertAlways(multimap.values().count === 4)
    assertAlways(multimap.containsKey("key2") === false)
    assertAlways(multimap.get("key2").count === 0)
    assertAlways(multimap.removeKey("key2") === 0)
    assertAlways(multimap.removeValue("key3Value") === 1)
    assertAlways(multimap.getKeys().count === 1)
    assertAlways(multimap.values().count === 3)
    assertAlways(multimap.get("key3").count === 0)
    assertAlways(multimap.containsKey("key3") === false)
    assertAlways(multimap.isEmpty() === false)

    assertAlways(multimap.get("key").count === 3)
    assertAlways(multimap.removeValue("value") === 2)
    assertAlways(multimap.get("key").count === 1)
    assertAlways(multimap.get("key")[0] === "value2")
    assertAlways(multimap.getKeys().count === 1)
    assertAlways(multimap.values().count === 1)
    assertAlways(multimap.values()[0] === "value2")
    assertAlways(multimap.isEmpty() === false)

    multimap.clear();
    checkEmpty(multimap);

    assertAlways(multimap.put("key", "value") === 0)
    assertAlways(multimap.put("key", "value") === 1)
    assertAlways(multimap.put("key", "value2") === 2)
    assertAlways(multimap.put("key2", "key2Value") === 0)
    assertAlways(multimap.put("key2", "key2Value2") === 1)
    assertAlways(multimap.put("key3", "key3Value") === 0)
    check(multimap);
    multimap.clear();

    var checkWithSingleKey = LMD(m, key, values) {
        for (var i = 0; i < values.count; ++i) {
            assertAlways(m.put(key, values[i]) === i)
            assertAlways(m.get(key).count === i+1)
            assertAlways(m.get(key)[i] === values[i])
            assertAlways(m.containsKey(key) === true)
            assertAlways(m.containsValue(values[i]) === true)
            assertAlways(m.containsValue(key) === false)
            assertAlways(m.getKeys().count === 1)
            assertAlways(m.getKeys()[0] === key)
            assertAlways(m.isEmpty() === false)

            var currentValues = m.values();
            assertAlways(currentValues.count === i+1)
            var orgValues = values.clone();
            for (var j = 0; j <= i; ++j) {
                assertAlways(orgValues.remove(currentValues[j]) === 1)
            }
            assertAlways(orgValues.count === (values.count - i - 1))

            for (var j = 0; j <= i; ++j) {
                assertAlways(m.get(key)[j] === values[j])
                assertAlways(m.contains(key, values[j]) === true)
                assertAlways(m.containsValue(values[j]) === true)
            }

            for (var j = i+1; j < values.count; ++j) {
                assertAlways(m.contains(key, values[j]) === false)
                assertAlways(m.containsValue(values[j]) === false)
            }

            for (var j = 0; j < values.count; ++j) {
                assertAlways(m.contains((string)values[j], key) === false)
                assertAlways(m.contains((string)values[i], values[j]) === false)
                assertAlways(m.contains((string)values[j], values[i]) === false)
                assertAlways(m.containsKey((string)values[j]) === false)
            }

            m.foreach(LMD(k, values, key) {
                assertAlways(key === k)
                assertAlways(count++ === 0)
                assertAlways(values.count === i+1)
            } incontextof %[ count:0, i:i ], key);
        }
        invalidate m;
    };

    checkWithSingleKey(new MultiMap(), "test", ["value", "testValue", "てすと"]);
    checkWithSingleKey((new MultiMap()).clone(), "test", ["value", "testValue", "てすと"]);
    checkWithSingleKey((new MultiMap()).clone().clone(), "test", ["value", "testValue", "てすと"]);
    checkWithSingleKey(new MultiMap(), "test", ["0", "1", "2", "3"]);
    checkWithSingleKey(new MultiMap(), "test", [0, 1, 2, 3]);
    checkWithSingleKey(new MultiMap(),  "100", [0, 1, 2, 3]);
    checkWithSingleKey(new MultiMap(),  "100", ["val", "val2", "val3", "val4"]);

    invalidate multimap;
}
{
    var multimap = new MultiMap();
    assertAlways(multimap.toString() === "%[]")
    multimap.put("key", "value");
    assertAlways(multimap.toString() === '%[key:["value"]]')
    multimap.put("key2", "value2");
    assertAlways(multimap.toString() === &--'%[key2:["value2"], key:["value"]]'--&)
    multimap.put("key2", "value3");
    assertAlways(multimap.toString() === &--'%[key2:["value2", "value3"], key:["value"]]'--&)
    multimap.clear();
    assertAlways(multimap.toString() === "%[]")
}
{
    var multimap = new MultiMap();
    var clonedMultimap = multimap.clone();

    var data = multimap.serialize();
    multimap.deserialize(data);
    assertAlways(multimap.equals(clonedMultimap))

    multimap.put("key", "value");
    data = multimap.serialize();
    clonedMultimap.deserialize(data);
    assertAlways(multimap.equals(clonedMultimap))

    multimap.clear();
    multimap.deserialize(data);
    assertAlways(multimap.equals(clonedMultimap))

    multimap.clear();
    multimap.put("key", "value");
    multimap.put("key2", "value2");
    data = multimap.serialize();
    clonedMultimap.deserialize(data);
    multimap.put("key2", "value3");
    multimap.put("key3", "value4");
    multimap.deserialize(data);
    assertAlways(multimap.equals(clonedMultimap))
}
