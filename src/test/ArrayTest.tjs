// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

{
    var equals = LMD(a, a2) {
        if (a.count !== a2.count) return false;
        for (var i = 0; i < a.count; ++i) {
            if (a[i] !== a2[i]) return false;
        }
        return true;
    };
    assertAlways( equals([], []) )
    assertAlways( !equals([], [0]) )
    assertAlways( equals([1], [1]) )
    assertAlways( !equals([1], ["1"]) )
    assertAlways( equals([1,2,3,4], [1,2,3,4]) )
    assertAlways( equals([0,1,2,"3"], [0,1,2,"3"]) )
    assertAlways( !equals([0,1,2,3], [0,1,2,"3"]) )
    assertAlways( !equals([0,1,2,3], [0,1,2,3,4]) )
    assertAlways( !equals([0,1,2,3], [0,1,2]) )

    {
        var array = new Array();
        var array2 = [ 10, 20, 30, 40, 50 ];

        assertAlways( array.count === 0 )
        assertAlways( array2.count === 5 )

        assertAlways( array.join(",") === "" )
        assertAlways( array2.join("") === "1020304050" )

        array.reverse();
        array2.reverse();
        assertAlways( array.count === 0 )
        assertAlways( array2.count === 5 )
        assertAlways( equals(array, []) )
        assertAlways( equals(array2, [50, 40, 30, 20, 10]) )

        array.reverse();
        array2.reverse();
        assertAlways( equals(array, []) )
        assertAlways( equals(array2, [10, 20, 30, 40, 50]) )

        assertAlways( array.push("0") === 1 )
        assertAlways( array2.push(0) === 6 )

        assertAlways( array[0] === "0" )
        assertAlways( array2[5] === 0 )

        assertAlways( array.pop() === "0" )
        assertAlways( array.pop() === void )
        assertAlways( array2.pop() === 0 )

        assertAlways( array.unshift("t") === 1)
        assertAlways( array.unshift("t2") === 2)
        assertAlways( array2.unshift(0) === 6)
        assertAlways( array2.unshift(-10) === 7)

        assertAlways( equals(array, [ "t2", "t"]) )
        assertAlways( equals(array2, [-10, 0, 10, 20, 30, 40, 50]) )

        assertAlways( array.shift() === "t2" )
        assertAlways( array.shift() === "t" )
        assertAlways( array.shift() === void )
        assertAlways( array2.shift() === -10 )
        assertAlways( array2.shift() === 0 )

        assertAlways( array.find("") === -1 )
        assertAlways( array2.find("") === -1 )
        assertAlways( array2.find("10") === -1 )
        assertAlways( array2.find(10) === 0 )
        assertAlways( array2.find(30) === 2 )

        assertAlways( array.add("") === 0 )
        assertAlways( array.add("a") === 1 )
        assertAlways( equals(array, [ "", "a"]) )

        assertAlways( array2.add(60) === 5 )
        assertAlways( array2.add(70) === 6 )
        assertAlways( equals(array2, [10, 20, 30, 40, 50, 60, 70]) )

        assertAlways( array.push("b") === 3 )
        assertAlways( array.push("c", "d", "e") === 6 )
        assertAlways( array.count === 6 )
        assertAlways( equals( array, ["", "a", "b", "c", "d", "e"] ) )

        assertAlways( array2.push(80) === 8 )
        assertAlways( array2.push(90, 100) === 10 )
        assertAlways( equals(array2, [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) )

        array2.sort("-");
        assertAlways( equals(array2, [100, 90, 80, 70, 60, 50, 40, 30, 20, 10] ) )
        array2.sort("0");
        assertAlways( equals(array2, [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) )
        array2.sort("9");
        assertAlways( equals(array2, [100, 90, 80, 70, 60, 50, 40, 30, 20, 10] ) )
        array2.sort("a");
        assertAlways( equals(array2, [10, 100, 20, 30, 40, 50, 60, 70, 80, 90]) )
        array2.sort("z");
        assertAlways( equals(array2, [90, 80, 70, 60, 50, 40, 30, 20, 100, 10] ) )
        array2.sort("+");
        assertAlways( equals(array2, [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) )
        array2.sort(LMD(a, b){ return a%20 === b%20 ? a < b : ( a%20 === 0 ? true : false); });
        assertAlways( equals(array2, [20, 40, 60, 80, 100, 10, 30, 50, 70, 90]) )

        invalidate array;
        invalidate array2;
    }
    {
        var texts = ["a", "b", "c", "d", "e", "1", "2"];
        texts.sort();
        assertAlways( equals(texts, ["1", "2", "a", "b", "c", "d", "e"] ) )
        texts.sort("-");
        assertAlways( equals(texts, ["e", "d", "c", "b", "a", "2", "1"] ) )
        texts.sort("9", true);
        assertAlways( equals(texts, ["2", "1", "e", "d", "c", "b", "a"] ) )
        texts.sort("0", true);
        assertAlways( equals(texts, ["e", "d", "c", "b", "a", "1", "2"] ) )
        texts.sort("a", true);
        assertAlways( equals(texts, ["1", "2", "a", "b", "c", "d", "e"] ) )
        texts.sort("z", true);
        assertAlways( equals(texts, ["e", "d", "c", "b", "a", "2", "1"] ) )
        texts.sort("+");
        assertAlways( equals(texts, ["1", "2", "a", "b", "c", "d", "e"] ) )

        invalidate texts;
    }
    {
        var array = new Array();
        var array2 = [ 10, 20, 30, 40, 50 ];

        array.split(",", "a,b,c,d,e");
        assertAlways( equals(array, ["a", "b", "c", "d", "e"]) )

        array.split(",l:", ",l:");
        assertAlways( equals(array, ["", "", "", ""]) )

        array.split(",l:", ",l:", void, true);
        assertAlways( equals(array, []) )

        array.assign(array2);
        assertAlways( equals(array, array2) )

        array[0] += 1;
        assertAlways( array[0] !== array[1] )

        invalidate array;
        invalidate array2;
    }
    {
        var array = new Array();
        var array2d = [ [0,1,2,3], [10,11,12,13], [20,21,22,23] ];

        array.assign(array2d);
        assertAlways( equals(array, array2d) )

        array[0][0] += 1;
        assertAlways( array[0][0] === array2d[0][0] )

        array.assignStruct(array2d);
        assertAlways( !equals(array, array2d) )

        array[0][0] += 1;
        assertAlways( array[0][0] !== array2d[0][0] )

        invalidate array;
        invalidate array2d;
    }
    {
        var array = new Array();
        var texts = [ "line", "line2", "テスト" ];
        assertAlways( texts.save("arrayTest_out.tmp", "") === texts )
        assertAlways( array.load("arrayTest_out.tmp") === array )
        assertAlways( equals(array, texts) )

        array.clear();
        assertAlways( texts.save("arrayTest_out.tmp", "b") === texts )
        assertAlways( array.load("arrayTest_out.tmp") === array )
        assertAlways( equals(array, texts) )

        array.clear();
        assertAlways( texts.save("arrayTest_out.tmp", "z") === texts )
        assertAlways( array.load("arrayTest_out.tmp") === array )
        assertAlways( equals(array, texts) )

        assertAlways( texts.save("arrayTest_out.tmp", "c") === texts )
        assertAlways( array.load("arrayTest_out.tmp") === array )
        assertAlways( equals(array, texts) )

        assertAlways( texts.saveStruct("arrayTest_out.tmp", "") === texts)
        assertAlways( equals(Scripts.evalStorage("arrayTest_out.tmp"), texts) )

        assertAlways( texts.saveStruct("arrayTest_out.tmp", "b") === texts)
        assertAlways( equals(Scripts.evalStorage("arrayTest_out.tmp"), texts) )

        assertAlways( texts.saveStruct("arrayTest_out.tmp", "z") === texts)
        assertAlways( equals(Scripts.evalStorage("arrayTest_out.tmp"), texts) )

        assertAlways( texts.saveStruct("arrayTest_out.tmp", "c") === texts)
        assertAlways( equals(Scripts.evalStorage("arrayTest_out.tmp"), texts) )

        invalidate array;
        invalidate texts;
        Storages.deleteFile("arrayTest_out.tmp");
        assertAlways( !Storages.isExistentStorage("arrayTest_out.tmp") )
    }
    {
        var array = new Array();
        var array2 = [ 0, 1, 2, "0", "1", "2", 0, 1, 2 ];

        assertAlways( array.remove(0) === 0 )
        assertAlways( array.remove("0") === 0 )
        assertAlways( array.push(0,1,2) === 3 )
        assertAlways( array.remove(0) === 1 )
        assertAlways( equals(array, [ 1, 2 ]) )
        assertAlways( array.remove(2) === 1 )
        assertAlways( array.remove(1) === 1 )
        assertAlways( equals(array, []) )

        assertAlways( array2.remove(0, false) === 1 )
        assertAlways( equals(array2, [ 1, 2, "0", "1", "2", 0, 1, 2 ]) )

        assertAlways( array2.remove(0, true) === 1 )
        assertAlways( equals(array2, [ 1, 2, "0", "1", "2", 1, 2 ]) )

        assertAlways( array2.remove(2, true) === 2 )
        assertAlways( equals(array2, [ 1, "0", "1", "2", 1 ]) )

        assertAlways( array2.remove("1", true) === 1 )
        assertAlways( equals(array2, [ 1, "0", "2", 1 ]) )

        invalidate array;
        invalidate array2;
    }
    {
        var array = new Array();
        exception(array.erase(0));

        assertAlways( array.add(0) === 0 )
        assertAlways( array.add(1) === 1 )
        assertAlways( array.erase(0) === void )
        assertAlways( equals(array, [1]) )
        assertAlways( array.erase(0) === void )
        assertAlways( equals(array, []) )

        invalidate array;
    }
    {
        var array2 = [ 0, 1, 2, "0", "1", "2", 0, 1, 2 ];
        assertAlways( array2.erase(1) === void)
        assertAlways( equals(array2, [ 0, 2, "0", "1", "2", 0, 1, 2 ]) )
        assertAlways( array2.erase(4) === void)
        assertAlways( equals(array2, [ 0, 2, "0", "1", 0, 1, 2 ]) )

        exception(array2.erase(20));

        invalidate array2;
    }
    {
        assertAlways(typeof Array.value === "undefined")
        assertAlways(typeof Array.inc === "undefined")
        assertAlways(typeof Array.dec === "undefined")
        Array.value = 0;
        Array.inc = LMD { return ++value; };
        Array.dec = LMD { return --value; };

        var array = new Array();
        assertAlways( array.value === 0 )
        assertAlways( array.inc() === 1 )
        assertAlways( array.value === 1 )
        assertAlways( array.inc() === 2 )
        assertAlways( array.value === 2 )
        assertAlways( array.dec() === 1 )
        assertAlways( array.value === 1 )
        assertAlways( array.dec() === 0 )

        var array2 = [10, 20, 30];
        assertAlways( array2.value === 0 )
        assertAlways( array2.inc() === 1 )
        assertAlways( array2.dec() === 0 )
        assertAlways( array2.value === 0 )

        var array3 = Plugins.getList();
        assertAlways( array3.value === 0 )
        assertAlways( array3.inc() === 1 )

        assertAlways( array.inc() === 1 )
        array.assignStruct([ [],[],[] ]);
        assertAlways( array.value === 1 )
        assertAlways( array[0].value === 0 )
        assertAlways( array[0].inc() === 1 )
        assertAlways( array[0].value === 1 )

        assertAlways( array.saveStruct("arrayTest_out.tmp", "b") === array )
        array = Scripts.evalStorage("arrayTest_out.tmp");
        assertAlways( array.value === 0 )
        assertAlways( array.inc() === 1 )
        assertAlways( array[0].value === 0 )
        assertAlways( array[0].inc() === 1 )

        LMD(args*) {
            assertAlways( args.value === 0 )
            assertAlways( args.inc() === 1 )
        }(0, 1, 2);

        invalidate array;
        invalidate array2;
        invalidate array3;
        delete Array.value;
        delete Array.inc;
        delete Array.dec;
        assertAlways(typeof Array.value === "undefined")
        assertAlways(typeof Array.inc === "undefined")
        assertAlways(typeof Array.dec === "undefined")
        Storages.deleteFile("arrayTest_out.tmp");
        assertAlways( !Storages.isExistentStorage("arrayTest_out.tmp") )
    }

    invalidate equals;
}
