// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

Func(foreach)(object:object, callback:Function, *) {
    checkArgs
    return global.Scripts.foreach(object, callback, *);
}

Func(clone)(object:any) {
    checkArgs
    if (typeof object === "Object" && object !== null && object isvalid && !(object instanceof "Function")) {
        return object.clone();
    }
    return object;
}

Func(serialize)(object:any) {
    checkArgs
    if (typeof object === "Object" && object !== null) {
        assert(object isvalid)
        assert(!(object instanceof "Function"))
        return object.serialize();
    }
    return object;
}

Func(deserialize)(object:any, *) {
    checkArgs
    if (typeof object === "Object" && object !== null) {
        assert(object isvalid)
        assert(!(object instanceof "Function"))
        return object.deserialize(*);
    }
    return object;
}

Func(equals)(target:any, target2:any) {
    checkArgs
    var targetType = typeof target;
    var target2Type = typeof target2;
    if (targetType !== target2Type) return false;
    switch (typeof target) {
    case "Integer":
    case "String":
    case "Real":
    case "Octet":
    case "void":
        return target === target2;
    case "Object":
        if (target === null) return target2 === null;
        return target.equals(target2);
    default:
        assert(false)
    }
    return false;
}

Func(toString)(object:any) {
    checkArgs
    switch (typeof object) {
    case "void": return "(void)";
    case "Integer": return "(int)" + object;
    case "Real": return "(real)" + object;
    case "String": return '"' + object + '"';
    case "Octet":
        var returnValue = "(octet)<% ";
        for (var i = 0; i < object.length; ++i) {
            returnValue += "%02x ".sprintf(object[i]);
        }
        returnValue += "%>";
        return returnValue;
    case "Object":
        if (object === null) return "null";
        if (typeof object.toString !== "undefined") {
            return object.toString();
        }
        return (string)object;
    }
};

Func(setStaticMember)(classObject:Class, memberName:string, member:any) {
    checkArgs
    Scripts.propSet(classObject, memberName, member, pfStaticMember | pfMemberEnsure);
}

Func(success)(object:any) {
    checkArgs
    return object === SUCCESS;
}
