// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

Class(AbstractEnumerable)
{
    property current { getter { return this._iterator.current; } }

    AbstractFunc(moveNext)()

    Func(select)() { return new global.SelectEnumerable(this, *); }
    Func(selectMany)() { return new global.SelectManyEnumerable(this, *); }
    Func(where)() { return new global.WhereEnumerable(this, *); }
    Func(take)() { return new global.TakeEnumerable(this, *); }
    Func(skip)() { return new global.SkipEnumerable(this, *); }
    Func(distinct)() { return new global.DistinctEnumerable(this); }

    Func(foreach)(callback:Function, *) {
        checkArgs
        while (this.moveNext()) {
            var result = callback(this.current, *);
            if (result !== void) return result;
        }
    }

    Func(toArray)() {
        var array = [];
        while  (this.moveNext()) { array.add(this.current); }
        return array;
    }

    Func(toDictionary)(keySelector:Function, elementSelector:Function+, *) {
        checkArgs
        if (elementSelector === void) elementSelector = LMD(elm) { return elm; };
        var result = %[];
        while (this.moveNext()) {
            var key = keySelector(this.current, *);
            if (result[key] !== void) {
                throw new global.Exception(expandMessage(EXCEPTION_LINQ_ARRAY_DUPLICATE_KEYS, "KEY", key));
            }
            result[key] = elementSelector(this.current, *);
        }
        return result;
    }

    Func(toMultiMap)(keySelector:Function, elementSelector:Function+, *) {
        checkArgs
        if (elementSelector === void) elementSelector = LMD(elm) { return elm; };
        var result = new global.MultiMap();
        while (this.moveNext()) {
            var key = keySelector(this.current, *);
            var value = elementSelector(this.current, *);
            result.put(key, value);
        }
        return result;
    }

    Func(count)(predicate:Function+, *) {
        checkArgs
        var counter = 0;
        if (predicate === void) {
            while (this.moveNext()) ++counter;
        } else {
            while (this.moveNext()) {
                if (predicate(this.current, *)) ++counter;
            }
        }
        return counter;
    }

    Func(any)(predicate:Function+, *) {
        checkArgs
        if (predicate === void) return this.moveNext();
        while (this.moveNext()) {
            if (predicate(this.current, *)) return true;
        }
        return false;
    }

    Func(first)(defaultValue:any+, predicate:Fnction+, *) {
        checkArgs
        if (predicate === void) {
            if (this.moveNext()) return this.current;
            else return defaultValue;
        }
        while (this.moveNext()) {
            if (predicate(this.current, *)) return this.current;
        }
        return defaultValue;
    }

    Func(last)(defaultValue:any+, predicate:Function+, *) {
        checkArgs
        if (predicate === void) predicate = LMD { return true; };
        var found = false;
        var lastValue;
        while (this.moveNext()) {
            if (predicate(this.current, *)) {
                found = true;
                lastValue = this.current;
            }
        }
        if (found) return lastValue;
        return defaultValue;
    }

    var _iterator;

    Constructor(iterator:AbstractEnumerable) {
        checkArgs
        this._iterator = iterator;
    }
}

ClassExtends(ArrayEnumerable, AbstractEnumerable)
{
    property current { getter { return this._iterator[this._index]; } }

    OverrideFunc(moveNext)() { return ++this._index < this._iterator.count; }

    var _index = -1;

    Constructor(array:Array) {
        checkArgs
        // super.AbstractEnumerable(iterator); // 呼ばない
        this._iterator = array;
    }
}

ClassExtends(SelectEnumerable, AbstractEnumerable)
{
    property current { getter { return this._current; } }

    OverrideFunc(moveNext)() {
        if (!this._iterator.moveNext()) { return false; }
        this._current = this._selector(this._iterator.current);
        return true;
    }

    var _selector;
    var _current;

    Constructor(iterator:AbstractEnumerable, selector:Function) {
        checkArgs
        super.AbstractEnumerable(iterator);
        this._selector = selector;
    }
}

ClassExtends(SelectManyEnumerable, AbstractEnumerable)
{
    property current { getter { return this._current[this._currentIndex]; } }

    OverrideFunc(moveNext)() {
        ++this._currentIndex;
        if (this._currentIndex < this._current.count) return true;
        while (this._iterator.moveNext()) {
            var selected = this._selector(this._iterator.current);
            typeCheck(selected, "Array")
            if (selected.count === 0) continue;
            this._current.clear();
            this._current.push(selected*);
            this._currentIndex = 0;
            return true;
        }
        return false;
    }

    var _selector;
    var _current = [];
    var _currentIndex = 0;

    Constructor(iterator:AbstractEnumerable, selector:Function) {
        checkArgs
        super.AbstractEnumerable(iterator);
        this._selector = selector;
    }

    Finalize() {
        super.finalize();
        invalidate this._current;
    }
}

ClassExtends(WhereEnumerable, AbstractEnumerable)
{
    OverrideFunc(moveNext)() {
        while (this._iterator.moveNext()) {
            if (this._predicate(this._iterator.current)) return true;
        }
        return false;
    }

    var _predicate;

    Constructor(iterator:AbstractEnumerable, predicate:Fuhunction) {
        checkArgs
        super.AbstractEnumerable(iterator);
        this._predicate = predicate;
    }
}

ClassExtends(TakeEnumerable, AbstractEnumerable)
{
    OverrideFunc(moveNext)() { return ++this._index < this._count && this._iterator.moveNext(); }

    var _count;
    var _index = -1;

    Constructor(iterator:AbstractEnumerable, count:int) {
        checkArgs
        super.AbstractEnumerable(iterator);
        this._count = count;
    }
}

ClassExtends(SkipEnumerable, AbstractEnumerable)
{
    OverrideFunc(moveNext)() {
        if (!this._skipped) {
            this._skipped = true;
            for (var i = this._count; i > 0; --i) {
                if (!this._iterator.moveNext()) return false;
            }
        }
        return this._iterator.moveNext();
    }

    var _count;
    var _skipped = false;

    Constructor(iterator:AbstractEnumerable, count:int) {
        checkArgs
        super.AbstractEnumerable(iterator);
        this._count = count;
    }
}

ClassExtends(DistinctEnumerable, AbstractEnumerable)
{
    OverrideFunc(moveNext)() {
        while (this._iterator.moveNext()) {
            if (this._map[this._iterator.current] === void) {
                this._map[this._iterator.current] = true;
                return true;
            }
        }
        return false;
    }

    var _map = %[];

    Constructor(iterator:AbstractEnumerable) {
        checkArgs
        super.AbstractEnumerable(iterator);
    }

    Finalize() {
        super.finalize();
        invalidate _map;
    }
}
