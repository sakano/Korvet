// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

Scripts.readIniFile = LMD(path:string, sectionType, result:Dictionary) {
    checkArgs
    assert(sectionType === IniFileType_SectionRequired || sectionType === IniFileType_SectionOptional)
    assert(result.isEmpty())
    if (!Storages.isExistentStorage(path)) return new FileNotFoundError(path);
    result.clear();
    var line;
    var lineNum = -1;
    try {
        var lines = [];
        lines.load(path);
        var current = (sectionType === IniFileType_SectionRequired) ? void : result;
        while(++lineNum < lines.count) {
            line = lines[lineNum].trim();
            switch(line[0]) {
            case ";": // comment line
                break;
            case "[": // section
                if (line[line.length-1] !== "]") {
                    throw new ParseError(path, lineNum+1, line, ERROR_READ_INI_FILE_SECTION);
                }
                var section = line.substr(1, line.length-2).trim();
                if (result[section] === void) { result[section] = %[]; }
                current = result[section];
                break;
            default:
                var idx = line.indexOf("=");
                if (idx > 0) { // keys
                    var name = line.substr(0,idx).trim();
                    var value = line.substr(idx+1).trim();
                    if (current === void) {
                        throw new ParseError(path, lineNum+1, line, ERROR_READ_INI_FILE_SECTION_UNSPECIFIED);
                    }
                    if (current[name] !== void) {
                        throw new ParseError(path, lineNum+1, line, expandMessage(ERROR_READ_INI_FILE_KEY_NAME_DUPLICATE, "NAME", name));
                    }
                    current[name] = value;
                }
                break;
            }
        }
    } catch(error) {
        var error = new ParseError(path, lineNum+1, line, expandMessage(ERROR_READ_INI_FILE, "PATH", path, "LINE", line, "LINENUM", lineNum+1), error);
        return error;
    }
    return SUCCESS;
};

Scripts.writeIniFile = LMD(path:string, dic:Dictionary) {
    checkArgs
    var lines = [];
    var innerDics = [];
    foreach(dic, LMD(key, value, lines, innerDics) {
        if (value instanceof "Dictionary") {
            innerDics.push(key, value);
        } else {
            lines.push(key + "=" + value); // These keys are not included in sections.
        }
    }, lines, innerDics);
    for (var i = 0; i < innerDics.count; i += 2) {
        lines.push("[" + innerDics[i] + "]");
        foreach(innerDics[i+1], LMD(key, value, lines) { lines.push(key + "=" + value); }, lines);
    }
    lines.save(path);
};
