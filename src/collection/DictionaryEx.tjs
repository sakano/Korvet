// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

{   // Dictionaryの内容をHiddenMemberとして登録し直す
    var keys = global.getKeys(global.Dictionary);
    for (var i = 0; i < keys.count; ++i) {
        var key = keys[i];
        Scripts.propSet(Dictionary, key, Dictionary[key], pfHiddenMember | pfMemberEnsure);
    }
}

// もとのDictionary.clearではHiddenMemberも消されてしまうので上書きする
Scripts.propSet(Dictionary, "clear", LMD() {
    // getKeysで得られるメンバのみ消去
    var keys = global.getKeys(this);
    for (var i = 0; i < keys.count; ++i) delete this[keys[i]];
}, pfHiddenMember | pfMemberEnsure);

// もとのDictionary.assignではHiddenMemberも消されてしまうので上書きする
Scripts.propSet(Dictionary, "assign", LMD(src:Dictionary, clear:bool = true) {
    if (clear) this.clear();
    var keys = global.getKeys(src);
    for (var i = 0; i < keys.count; ++i) this[keys[i]] = src[keys[i]];
}, pfHiddenMember | pfMemberEnsure);

Scripts.propSet(Dictionary, "foreach", LMD(callback:Function, *) {
    checkArgs
    return global.foreach(this, callback, *);
}, pfHiddenMember | pfMemberEnsure);

Scripts.propSet(Dictionary, "toString", LMD() {
    var result = "%[";
    var keys = global.getKeys(this);
    for (var i = 0; i < keys.count; ++i) {
        if (i !== 0) result += ", ";
        result += keys[i] + ":" + global.toString(this[keys[i]]);
    }
    result += "]";
    return result;
}, pfHiddenMember | pfMemberEnsure);

Scripts.propSet(Dictionary, "equals", LMD(target:Dictionary) {
    return global.Dictionary._equalsImpl(target, LMD(a, b) { return global.equals(a, b); });
}, pfHiddenMember | pfMemberEnsure);

Scripts.propSet(Dictionary, "equalsShallow", LMD(target:Dictionary) {
    return global.Dictionary._equalsImpl(target, LMD(a, b) { return a === b; });
}, pfHiddenMember | pfMemberEnsure);

Scripts.propSet(Dictionary, "_equalsImpl", LMD(target:Dictionary, comparer:Function) {
    checkArgs
    if (!(target instanceof "Dictionary")) return false;
    var thisKeys = getKeys(this);
    var targetKeys = getKeys(target);
    if (this.count !== target.count) return false;
    for (var i = 0; i < thisKeys.count; ++i) {
        var key = thisKeys[i];
        if (target[key] === void) return false;
        if (!comparer(this[key], target[key])) return false;
    }
    return true;
}, pfHiddenMember | pfMemberEnsure);

Scripts.propSet(Dictionary, "clone", LMD() {
    var result = %[];
    var keys = global.getKeys(this);
    for (var i = 0; i < keys.count; ++i) {
        result[keys[i]] = global.clone(this[keys[i]]);
    }
    return result;
}, pfHiddenMember | pfMemberEnsure);

Scripts.propSet(Dictionary, "cloneShallow", LMD() {
    var result = %[];
    var keys = global.getKeys(this);
    for (var i = 0; i < keys.count; ++i) {
        result[keys[i]] = this[keys[i]];
    }
    return result;
}, pfHiddenMember | pfMemberEnsure);

Scripts.propSet(Dictionary, "dispose", LMD() {
    var keys = global.getKeys(this);
    for (var i = 0; i < keys.count; ++i) {
        var key = keys[i];
        assert(typeof this[key] === "Object")
        assert(this[key] isvalid)
        if (typeof this[key] !== "Object") continue;
        if (!this[key] isvalid) continue;
        invalidate this[key];
        delete this[key];
    }
}, pfHiddenMember | pfMemberEnsure);

Scripts.propSet(Dictionary, "serialize", LMD() {
    var result = this.clone();
    return result;
}, pfHiddenMember | pfMemberEnsure);

Scripts.propSet(Dictionary, "deserialize", LMD(serialized:Dictionary) {
    checkArgs
    var keys = global.getKeys(this);
    for (var i = 0; i < keys.count; ++i) delete this[keys[i]];
    var keys = global.getKeys(serialized);
    for (var i = 0; i < keys.count; ++i) {
        this[keys[i]] = global.clone(serialized[keys[i]]);
    }
}, pfHiddenMember | pfMemberEnsure);

Scripts.propSet(Dictionary, "getKeys", LMD() {
    return global.getKeys(this);
}, pfHiddenMember | pfMemberEnsure);

Scripts.propSet(Dictionary, "getValues", LMD() {
    var values = [];
    var keys = global.getKeys(this);
    for (var i = 0; i < keys.count; ++i) {
        values.add(this[keys[i]]);
    }
    return values;
}, pfHiddenMember | pfMemberEnsure);

Scripts.propSet(Dictionary, "isEmpty", LMD() {
    return global.getKeys(this).count === 0;
}, pfHiddenMember | pfMemberEnsure);
