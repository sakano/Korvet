// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

Class(PriorityQueue)
{
    property count { getter { return this._values.count; } }

    Func(enqueue)(value:any, priority:int = PriorityQueue_Normal) {
        checkArgs
        assert(this._values.count === this._priorities.count)
        // 追加する位置を探す
        var indexToInsert = 0;
        for (; indexToInsert < this._priorities.count; ++indexToInsert) {
            if (priority >= this._priorities[indexToInsert]) break;
        }
        // 追加する
        this._values.insert(indexToInsert, value);
        this._priorities.insert(indexToInsert, priority);
    }

    Func(dequeue)() {
        if (this._values.count === 0) return void;
        this._priorities.pop();
        return this._values.pop();
    }

    Func(peek)() {
        if (this._values.count === 0) return void;
        return this._values[this._values.count - 1];
    }

    Func(peekPriority)() {
        if (this._priorities.count === 0) return void;
        return this._priorities[this._priorities.count - 1];
    }

    Func(clear)() {
        this._values.clear();
        this._priorities.clear();
    }

    Func(clone)() {
        var queue = new global.PriorityQueue();
        queue._values = this._values.cloneShallow();
        queue._priorities = this._priorities.cloneShallow();
        return queue;
    }

    Func(toString)() {
        var priorityToString = %[
            PriorityQueue_Highest => "[highest]",
            PriorityQueue_High => "[high]",
            PriorityQueue_Normal => "[normal]",
            PriorityQueue_Low => "[low]",
            PriorityQueue_Lowest => "[lowest]"
        ];

        var result = "";
        for (var i = this._values.count - 1; i >= 0; --i) {
            result += global.toString(this._values[i]);
            result += priorityToString[this._priorities[i]];
            result += ", " if (i !== 0);
        }
        return result;
    }

    Func(equals)(target:PriorityQueue) {
        checkArgs
        if (!(target instanceof "PriorityQueue")) return false;
        return global.equals(this._values, target._values) && global.equals(this._priorities, target._priorities);
    }

    Func(isEmpty)() {
        return this._values.count === 0;
    }



    var _values = [];
    var _priorities = [];

    Constructor() {
        global.includeSerializable(this, [
            "_values", "_priorities"
        ]);
    }

    Finalize() {
        clear();
        invalidate this._values;
        invalidate this._priorities;
        global.finalizeSerializable(this);
    }
}
