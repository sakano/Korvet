// Copyright (C) 2015 Biscrat
FILE_INCLUDE_GUARD

Array.foreach = LMD(callback:Function, *) {
    checkArgs
    return global.foreach(this, callback, *);
};

Array.toString = LMD() {
    var returnValue = "[";
    for (var i = 0; i < this.count; ++i) {
        if (i !== 0) returnValue += ", ";
        returnValue += global.toString(this[i]);
    }
    returnValue += "]";
    return returnValue;
};

Array.equals = LMD(target:Array) {
    checkArgs
    return equalsImpl(target, LMD(a, b) { return global.equals(a, b); });
};

Array.equalsShallow = LMD() {
    return equalsImpl(target, LMD(a, b) { return a === b; });
};

Array.equalsImpl = LMD(target:Array, comparer:Function) {
    checkArgs
    if (!target instanceof "Array") return false;
    if (count !== target.count) return false;
    for (var i = 0; i < count; ++i) {
        if (!comparer(this[i], target[i])) return false;
    }
    return true;
};

Array.clone = LMD() {
    var result = [];
    for (var i = 0; i < this.count; ++i) {
        result[i] = global.clone(this[i]);
    }
    return result;
};

Array.cloneShallow = LMD() {
    var result = [];
    result.push(this*);
    return result;
};

Array.dispose = LMD() {
    for (var i = 0; i < this.count; ++i) {
        assert(typeof this[i] === "Object")
        assert(this[i] isvalid)
        if (typeof this[i] !== "Object") continue;
        if (!this[i] isvalid) continue;
        invalidate this[i];
    }
    this.clear();
};

Array.serialize = LMD() {
    return %[ values : this.cloneShallow() ];
};

Array.deserialize = LMD(dic) {
    this.clear();
    this.push(dic.values*);
};

Array.shuffle = LMD() {
    for (var i = count-1; i > 0; --i) {
        var j = global.Math.randomInt(0, i);
        a[i] <-> a[j];
    }
};

Array.isEmpty = LMD() {
    return this.count === 0;
};

Array.linq = LMD() {
    return new ArrayEnumerable(this);
};
